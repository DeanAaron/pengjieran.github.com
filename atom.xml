<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Java大杂烩</title>
  
  <subtitle>机会永远只给有准备的人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.examplecn.com/"/>
  <updated>2019-06-09T08:05:45.488Z</updated>
  <id>https://blog.examplecn.com/</id>
  
  <author>
    <name>Aaron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos7 mysql5.7 源代码编译安装</title>
    <link href="https://blog.examplecn.com/2019/05/28/centos7-mysql5-7-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.examplecn.com/2019/05/28/centos7-mysql5-7-源代码编译安装/</id>
    <published>2019-05-28T08:03:57.000Z</published>
    <updated>2019-06-09T08:05:45.488Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章总结在centos7环境中编译mysql5.7的源代码，起源是因为要给一个无法访问公网的服务器安装mysql数据库</p><a id="more"></a><p>先简单介绍一下编译环境吧：<br>    操作系统：CentOS 7.6<br>    使用软件：boost<a href="https://www.boost.org/" target="_blank" rel="noopener">boost</a><a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" target="_blank" rel="noopener">mysql5.7</a><br>    参考链接：<a href="https://dev.mysql.com/doc/refman/5.7/en/source-installation.html" target="_blank" rel="noopener">mysql install with source code</a><br>从参考链接里可以看出，mysql5.7的源代码要求已经安装好了cmake，boost要求1.59.0的版本，这些环境准备好后就可以开始编译源代码了。</p><h1 id="安装实验环境"><a href="#安装实验环境" class="headerlink" title="安装实验环境"></a>安装实验环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ ncurses ncurses-devel bison cmake make</span><br></pre></td></tr></table></figure><h1 id="创建运行用户，不允许登录"><a href="#创建运行用户，不允许登录" class="headerlink" title="创建运行用户，不允许登录"></a>创建运行用户，不允许登录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -M -s /sbin/nologin mysql  //创建用户mysql，不创建家目录，不允许登陆系统</span><br></pre></td></tr></table></figure><h1 id="上传相关源代码，主要是mysql源代码包和boost"><a href="#上传相关源代码，主要是mysql源代码包和boost" class="headerlink" title="上传相关源代码，主要是mysql源代码包和boost"></a>上传相关源代码，主要是mysql源代码包和boost</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv boost_1_59_0 boost</span><br></pre></td></tr></table></figure><h1 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h1><p>如果在cmake过程中有报错，需要先解决错误，然后删除mysql源码根目录下的CMakeCache.txt，然后再cmake,否则会一直报同样的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cmake \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql \                         //指定mysql数据库安装目录</span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/<span class="built_in">local</span>/mysql/mysql.sock \               //连接文件位置</span><br><span class="line">-DSYSCONFDIR=/etc \                                                     //指定配置文件目录</span><br><span class="line">-DSYSTEMD_PID_DIR=/usr/<span class="built_in">local</span>/mysql \                                    //进程文件目录</span><br><span class="line">-DDEFAULT_CHARSET=utf8mb4  \                                            //指定默认使用的字符集编码</span><br><span class="line">-DDEFAULT_COLLATION=utf8mb4_general_ci \                              //指定默认使用的字符集校对规则</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \                         //存储引擎</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \                            //存储引擎</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \                     //存储引擎</span><br><span class="line">-DWITH_PERFSCHEMA_STORAGE_ENGINE=1 \                 //存储引擎</span><br><span class="line">-DMYSQL_DATADIR=/usr/<span class="built_in">local</span>/mysql/data \                              //数据库文件</span><br><span class="line">-DWITH_BOOST=/usr/<span class="built_in">local</span>/boost \                                         //指定Boost库的位置，mysql5.7必须添加该参数</span><br><span class="line">-DWITH_SYSTEMD=1                                                        //使系统支持MySQL数据库</span><br></pre></td></tr></table></figure><h1 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h1><p>这一步操作如果服务器配置不行的话会非常耗时，出去吃个大餐，再回来应该就编译完了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h1 id="修改数据库目录权限"><a href="#修改数据库目录权限" class="headerlink" title="修改数据库目录权限"></a>修改数据库目录权限</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql /usr/<span class="built_in">local</span>/mysql/</span><br></pre></td></tr></table></figure><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">socket = /usr/<span class="built_in">local</span>/mysql/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line">port = 3306</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">socket = /usr/<span class="built_in">local</span>/mysql/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">user = mysql</span><br><span class="line">basedir = /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">datadir = /usr/<span class="built_in">local</span>/mysql/data</span><br><span class="line">port = 3306</span><br><span class="line">character_set_server=utf8mb4</span><br><span class="line">pid-file = /usr/<span class="built_in">local</span>/mysql/mysqld.pid</span><br><span class="line">socket = /usr/<span class="built_in">local</span>/mysql/mysql.sock</span><br><span class="line">server-id = 1</span><br><span class="line">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,PIPES_AS_CONCAT,ANSI_QUOTES</span><br><span class="line">[mysqld_safe]</span><br><span class="line"></span><br><span class="line">chown mysql:mysql /etc/my.cnf   <span class="comment">#修改配置文件的权限</span></span><br></pre></td></tr></table></figure><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'PATH=/usr/local/mysql/bin:/usr/local/mysql/lib:$PATH'</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH'</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile   //使写入生效</span><br></pre></td></tr></table></figure><h1 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqld \</span><br><span class="line">--initialize-insecure \         //生成初始化密码（5.7版本才有），实际会生成空密码</span><br><span class="line">--user=mysql \                  //指定管理用户</span><br><span class="line">--basedir=/usr/<span class="built_in">local</span>/mysql \    //指定工作目录</span><br><span class="line">--datadir=/usr/<span class="built_in">local</span>/mysql/data //指定数据文件目录</span><br></pre></td></tr></table></figure><p>至此，mysql5.7版本的编译过程就完成了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章总结在centos7环境中编译mysql5.7的源代码，起源是因为要给一个无法访问公网的服务器安装mysql数据库&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://blog.examplecn.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://blog.examplecn.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql规范</title>
    <link href="https://blog.examplecn.com/2019/05/26/mysql%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.examplecn.com/2019/05/26/mysql规范/</id>
    <published>2019-05-26T12:46:25.000Z</published>
    <updated>2019-06-09T08:06:20.777Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍一些数据库设计中的通用规范</p><a id="more"></a><h1 id="数据库命名规范"><a href="#数据库命名规范" class="headerlink" title="数据库命名规范"></a>数据库命名规范</h1><ol><li>所有数据库对象名称必须使用小写字母并用下划线分割</li><li>所有数据库对象名称禁止使用mysql保留关键字</li><li>数据库对象命名要能做到见名知意，并且最好不要超过32个字符</li><li>临时库表必须以temp_为前缀并以日期为后缀，备份表必须以bak_为前缀并以日期为后缀</li><li>所有存储相同数据的列名和列类型必须一致</li></ol><h1 id="数据库基本设计规范"><a href="#数据库基本设计规范" class="headerlink" title="数据库基本设计规范"></a>数据库基本设计规范</h1><ol><li>说有表必须使用innodb存储引擎</li><li>数据库和表的字符集统一使用UTF8MB4</li><li>所有表和字段都需要添加注释</li><li>尽量控制单表数据量在500万以下</li><li>谨慎使用分区表</li><li>尽量做到冷热数据分离，减小表的宽度</li><li>禁止在表中建立预留字段</li><li>禁止在表中存储图片，文件等二进制文件</li><li>禁止在线上做数据库压力测试</li></ol><h1 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h1><ol><li>优先选择符合存储需要的最小数据类型</li><li>避免使用TEXT,BLOB数据类型，最常见的TEXT类型可以存储64K的数据</li><li>避免使用ENUM类型</li><li>尽可能把所有列定义为NOT NULL</li><li>使用TIMESTAMP或DATETIME类型存储时间</li><li>同财务相关的金额类数据必须使用decimal类型</li></ol><h1 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h1><ol><li>限制每张表上的索引数量，建议单张表索引不超过5个</li><li>禁止给表中的每一列都建立单独的索引</li><li>每个innodb表必须有个主键</li></ol><h1 id="数据库SQL开发规范"><a href="#数据库SQL开发规范" class="headerlink" title="数据库SQL开发规范"></a>数据库SQL开发规范</h1><ol><li>建议使用预编译语句进行数据库操作</li><li>避免数据类型的隐式转换</li><li>充分利用表上已经存在的索引</li><li>数据库设计时，应该要对以后扩展进行考虑</li><li>程序连接不同数据库使用不同账号，静止跨库查询</li><li>select字段必须明确，禁止*</li><li>禁止使用不含字段列表的insert语句</li><li>避免使用子查询，可以把子查询优化为join操作</li><li>避免使用join关联太多的表</li><li>减少同数据库的交互次数</li><li>对应同一列进行or判断时，使用in代替or</li><li>禁止使用order by rand进行随机排序</li><li>where从句中禁止对列进行函数转换和计算</li><li>在明显不会有重复值时使用UNION ALL而不是UNION</li><li>拆分复杂的大SQL为多个小SQL</li></ol><h1 id="数据库操作行为规范"><a href="#数据库操作行为规范" class="headerlink" title="数据库操作行为规范"></a>数据库操作行为规范</h1><ol><li>超100万行的批量写操作，要分多批次进行操作，否者可能会造成严重的主从延迟</li><li>对于大表使用pt-online-schema-change修改表结构</li><li>禁止为程序使用的账号赋予super权限</li><li>对于程序使用的数据库账号，遵循权限最小原则</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要介绍一些数据库设计中的通用规范&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://blog.examplecn.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://blog.examplecn.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>透彻理解Spring事物</title>
    <link href="https://blog.examplecn.com/2019/03/07/%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3Spring%E4%BA%8B%E7%89%A9/"/>
    <id>https://blog.examplecn.com/2019/03/07/透彻理解Spring事物/</id>
    <published>2019-03-07T07:51:56.000Z</published>
    <updated>2019-04-02T06:26:50.961Z</updated>
    
    <content type="html"><![CDATA[<p>本文将带你透彻理解，看完此篇，相信你能对Spring事物有一个透彻的理解与掌握。</p><a id="more"></a><h1 id="什么是事物？"><a href="#什么是事物？" class="headerlink" title="什么是事物？"></a>什么是事物？</h1><p>事物是逻辑上的一组操作组合，遮住操作要么都执行，要么都不执行。</p><h1 id="事物的四大特性（ACID）："><a href="#事物的四大特性（ACID）：" class="headerlink" title="事物的四大特性（ACID）："></a>事物的四大特性（ACID）：</h1><ul><li>原子性（Atomicity）：事物是最小的执行单位，不允许分割。事物的原子性确保动作要么全部成功，要么全部失败。</li><li>一致性（Consistency）：执行事物前后，数据保持一致</li><li>隔离性（Isolation）：各并发事物之间是独立的，不会相互影响</li><li>持久性（Persistence）：一个事物被提交后，对数据库的改变是持久的，即使数据库发生故障也不会有任何影响。<h1 id="Spring事物管理接口介绍"><a href="#Spring事物管理接口介绍" class="headerlink" title="Spring事物管理接口介绍"></a>Spring事物管理接口介绍</h1><h2 id="Spring事物管理接口"><a href="#Spring事物管理接口" class="headerlink" title="Spring事物管理接口"></a>Spring事物管理接口</h2></li><li>PlatformTransactionManager：（平台）事物管理器</li><li>TransactionDefinition：事物定义信息（事物隔离级别，传播行为，超时，只读，回滚策略）</li><li>TransactionStatus：事物运行状态<h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3>Spring并不直接管理事物，而是提供了多种事物管理器，他们将事物管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架来实现。通过PlatformTransactionManager接口，Spring为各个平台框架都提供了对应的事物管理器，但是具体的实现就是各个平台框架自己的事情了。<br>PlatformTransactionManager接口代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public interface <span class="title">PlatformTransactionManager</span><span class="params">()</span>...</span>&#123;  </span><br><span class="line">    <span class="comment">// Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span></span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>; </span><br><span class="line">    <span class="comment">// Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span></span><br><span class="line">    <span class="function">Void <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;  </span><br><span class="line">    <span class="comment">// Perform a rollback of the given transaction（对执行的事务进行回滚）</span></span><br><span class="line">    <span class="function">Void <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>几个比较常见的接口实现如下：<br>|事物|说明|<br>|-|-|<br>|DataSourceTransactionManager|使用Spring JDBC或者Mybatis进行持久化数据时使用|<br>|HibernateTransactionManager|使用Hibernate进行持久化数据时使用|<br>|JtaTransactionManager|使用JTA实现来管理事物，在一个事物跨越多个资源时使用|</p><h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><p>事物管理器接口PlatformTransactionManager通过getTransaction(TransactionDefinition definition)方法来得到一个事物，这个方法里面的参数是TransactionDefinition类，类里面定义了一些基本的事物属性。事物属性包含了五个方面：</p><ul><li>隔离级别</li><li>传播行为</li><li>回滚规则</li><li>是否只读</li><li>事物超时<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4>在谈事物隔离级别之前，先来谈谈并发事物带来的问题：</li><li>脏读（Dirty read）：当一个事物正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事物也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的，另外一个事物读到的这个数据就是脏数据，依据脏数据所做的操作可能是不正确的。</li><li>丢失修改（Lost to modify）：一个事物读取到一个数据时，另外一个事物也读取了这个数据，第一个事物修改了这个数据，第二个事物也修改了这个数据，这样第一个事物修改的数据就会丢失，称为丢失修改。</li><li>不可重复读（Unrepeatableread）：在一个事务内多次读同一个数据，在这个事物还没有结束时，另一个事物也访问该数据。那么，在第一个事物两次读数据中间，由于第二个事物修改了数据导致第一个事物两次读出的数据不一致，这样就发生了两次读到的数据是不一样的，因此称为不可重复读。</li><li>幻读（Phantom read）：发生在一个事物读取了几行数据，接着另外一个事物插入了几行数据，在随后的查询中，第一个事物就会发现多了一些数据，就像发生了幻视一样，所以称为幻读。<br>不可重复读的重点是修改，幻读的重点在于新增或者删除。<h5 id="TransactionDefinition-接口中定义了五个表示隔离级别的常量："><a href="#TransactionDefinition-接口中定义了五个表示隔离级别的常量：" class="headerlink" title="TransactionDefinition 接口中定义了五个表示隔离级别的常量："></a>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</h5></li><li>TransactionDefinition.ISOLATION_DEFAULT：使用后端数据库默认的隔离级别，mysql默认采用REPEATABLE_READ隔离级别，Oracle默认采用READ_COMMITTED隔离级别。</li><li>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读，幻读，不可重复读。</li><li>TransactionDefinition.ISOLATION_READ_COMMITTED：允许读取并发事物已经提交的数据，可以阻止脏读，但是幻读和不可重复读仍有可能发生。</li><li>TransactionDefinition.ISOLATION_REPEATABLE_READ：对同一字段的多次读取结果都是一致的，除非数据是被本身事物自己修改的，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li>TransactionDefinition.ISOLATION_SERIALIZABLE：最高的隔离级别，完全服从ACID的隔离级别，所有的事物依次逐个执行，这种事物之间就完全不可能产生干扰，但是会严重影响程序性能。通常情况下也不会用到该级别。<h4 id="事物传播行为（为了解决业务层方法之间互相调用的事物问题）"><a href="#事物传播行为（为了解决业务层方法之间互相调用的事物问题）" class="headerlink" title="事物传播行为（为了解决业务层方法之间互相调用的事物问题）"></a>事物传播行为（为了解决业务层方法之间互相调用的事物问题）</h4>当事物方法被另外一个事物方法调用时，必须指定事物应该如何传播，方法可能继续在现有事物中运行，也可能开启一个新事物，并在自己的事物中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</li><li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事物，则加入该事物，否则创建一个新事物</li><li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事物，则加入该事物，否则以非事物的方式继续运行</li><li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事物，则加入该事物，否则强制性抛出异常<br>不支持当前事物的情况：</li><li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新事物，如果当前存在事物，则把当前事物挂起</li><li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事物方式运行，如果当前存在事物，则把当前事物挂起</li><li>TransactionDefinition.PROPAGATION_NEVER：以非事物方式运行，如果当前存在事物，则抛出异常<br>其他情况：</li><li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事物，则创建一个新事物作为当前事物的嵌套事物来运行，如果当前没有事物，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED<br>前面6种事物的传播属性是从EJB中引进的，共享相同的概念。最后一种是Spring特有的，以PROPAGATION_NESTED启动的事物内嵌于外部事物中，此时，内嵌事物并不是一个独立的事物，它依赖于外部事物的存在，只有通过外部事物的提交，才能引起内部事物的提交，嵌套的子子事物不能单独提交。<h4 id="事物超时属性"><a href="#事物超时属性" class="headerlink" title="事物超时属性"></a>事物超时属性</h4>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。<h4 id="事务只读属性（对事物资源是否执行只读操作）"><a href="#事务只读属性（对事物资源是否执行只读操作）" class="headerlink" title="事务只读属性（对事物资源是否执行只读操作）"></a>事务只读属性（对事物资源是否执行只读操作）</h4>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。<h4 id="回滚规则（定义事务回滚规则）"><a href="#回滚规则（定义事务回滚规则）" class="headerlink" title="回滚规则（定义事务回滚规则）"></a>回滚规则（定义事务回滚规则）</h4>这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行期异常时才会回滚，而在遇到检查型异常时不会回滚（这一行为与EJB的回滚行为是一致的）。<br>但是你可以声明事务在遇到特定的检查型异常时像遇到运行期异常那样回滚。同样，你还可以声明事务遇到特定的异常不回滚，即使这些异常是运行期异常。<h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3>TransactionStatus接口用来记录事务的状态 该接口定义了一组方法,用来获取或判断事务的相应状态信息.<br>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。<br>TransactionStatus接口内容如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>; <span class="comment">// 是否是新的事物</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasSavepoint</span><span class="params">()</span></span>; <span class="comment">// 是否有恢复点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;  <span class="comment">// 设置为只回滚</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>; <span class="comment">// 是否为只回滚</span></span><br><span class="line">    <span class="keyword">boolean</span> isCompleted; <span class="comment">// 是否已完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>参考：<br><a href="https://juejin.im/post/5b00c52ef265da0b95276091" target="_blank" rel="noopener">https://juejin.im/post/5b00c52ef265da0b95276091</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将带你透彻理解，看完此篇，相信你能对Spring事物有一个透彻的理解与掌握。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://blog.examplecn.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot是如何做到自动化配置的？</title>
    <link href="https://blog.examplecn.com/2019/03/04/Springboot%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%85%8D%E7%BD%AE%E7%9A%84/"/>
    <id>https://blog.examplecn.com/2019/03/04/Springboot是如何做到自动化配置的/</id>
    <published>2019-03-04T13:20:17.000Z</published>
    <updated>2019-04-02T06:26:50.958Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot是如何做到自动化配置的？做到只需要一个Enable***就能开启指定功能的？相信你看完这篇博客，能有一个清晰的认识。</p><a id="more"></a><h1 id="开题"><a href="#开题" class="headerlink" title="开题"></a>开题</h1><p>大家在新建立一个SpringBoot应用的时候，首先看见的一个注解就是@SpringBootApplication，这个注解里面究竟干了什么事，为什么加了这个注解才能启动？本篇博客将为你一一展开。</p><h1 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h1><p>开始第一个SpringBoot应用的时候首先看见的一个注解就是这个，当你进入其源代码查看的时候发现也没有写什么，别急，看它上面的注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br></pre></td></tr></table></figure><p>大家会发现，里面又多了三个注解，第一个注解标明当前是一个SpringBoot应用，第二个注解表明要打开自动配置，第三个注解表明要扫描用户指定的包，重点看第二个注解，<br>进入以后会发现，最终引入的一个类是AutoConfigurationImportSelector，这个类里面都干了什么呢？<br>完整看完这个类的代码后你会发现，最重要的代码其实是这段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span></span></span><br><span class="line"><span class="function"><span class="params">AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span><br><span class="line">getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line"><span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span><br><span class="line">+ <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载工厂类，也就是从META-INF/spring.factories配置文件中读入各个工厂类，比如读入的org.springframework.boot.env.YamlPropertySourceLoader，就是支持yml格式配置文件的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringBoot是如何做到自动化配置的？做到只需要一个Enable***就能开启指定功能的？相信你看完这篇博客，能有一个清晰的认识。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring,SpringBoot" scheme="https://blog.examplecn.com/categories/Spring-SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://blog.examplecn.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>java集合框架：概述</title>
    <link href="https://blog.examplecn.com/2019/02/27/java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9A%E6%A6%82%E8%BF%B0/"/>
    <id>https://blog.examplecn.com/2019/02/27/java集合框架：概述/</id>
    <published>2019-02-27T07:21:46.000Z</published>
    <updated>2019-04-02T06:26:50.959Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容是概述java集合框架的所有内容，接下来的篇章会详细介绍各个集合的内容。</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>不在沉默中爆发，就在沉默中灭亡，看看去年的学习工作历程，简直惨不忍睹。一方面是因为博主要承担leader的工作，每天开不完的需求会，盯不完的任务进度。另一方面是因为博主确实放松了，没有再更新相关内容，新的一年，继续加油吧！<br>今年一年会通过博客的方式分享开发工作中所有的知识点和细节，有感兴趣的小伙伴关注哦！</p><h1 id="博客更新顺序"><a href="#博客更新顺序" class="headerlink" title="博客更新顺序"></a>博客更新顺序</h1><p>先来看一张图<br><img src="http://images.mtoliv.com/FhHysLDyuZyO1oYs86EpffCq_hml" alt="集合框架JDK8水印.jpg"><br>这是我花了一天的时间在JDK8的基础上总结的一张集合框架的思维导图，集合框架系列的博客顺序也会按照这个顺序往下写，有错误的地方希望小伙伴指正</p><h1 id="集合框架概述"><a href="#集合框架概述" class="headerlink" title="集合框架概述"></a>集合框架概述</h1><p>java原生提供的集合框架有集合和Map,集合包含有序可重复链表，无序不可重复链表和队列，Map包含基于hash表的map,基于二叉树的map,还有一个支持并发的CurrentHashMap</p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>List是一个接口，其实现有很多，这里只介绍常用的集合，主要实现有ArrayList,Vector,LinkedList</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>ArrayList继承至AbstractList，实现了List,RandomAccess,Cloneable,Serializable四个接口，使其具有List的通用操作，随机访问能力，可拷贝与可序列化。<br>底层实现是使用动态数组，数组有固定容量(length),当集合中的元素超过这个数量后就会发生扩容</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>Vector继承至AbstractList，实现了List,RandomAccess,Cloneable,Serializable四个接口，使其具有List的通用操作，随机访问能力，可拷贝与可序列化。唯一与ArrayList不同的是采用synchronized加锁的方式实现线程安全。</p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>继承AbstractSequentialList并实现了List, Deque, Cloneable, Serializable等接口<br>实现List接口，可以进行队列的操作，实现Deque接口，使其具有双端队列的能力</p><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>Set里面存放的都是无序的非重复数据。</p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>继承至AbstractSet并实现了Set,Cloneable,Serializable接口</p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>继承AbstractSet并实现了NavigableSet，Cloneable和Serializable接口</p><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>继承HashSet并实现Set,Cloneable,Serializable接口</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>继承AbstractMap，底层实现数组+链表+红黑树，线程不安全，可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力。</p><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>继承Dictionary类，是遗留类，很多映射的常用功能与HashMap类似，线程安全，但是不建议在新代码使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>继承abstractMap,实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要内容是概述java集合框架的所有内容，接下来的篇章会详细介绍各个集合的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://blog.examplecn.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.examplecn.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java集合框架：List源码探秘</title>
    <link href="https://blog.examplecn.com/2019/02/27/java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%9AArrayList%E6%BA%90%E7%A0%81%E6%8E%A2%E7%A7%98/"/>
    <id>https://blog.examplecn.com/2019/02/27/java集合框架：ArrayList源码探秘/</id>
    <published>2019-02-27T07:19:16.000Z</published>
    <updated>2019-04-02T06:26:50.959Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解List源码部分常使用的方法及注意事项</p><a id="more"></a><h1 id="集合与泛型"><a href="#集合与泛型" class="headerlink" title="集合与泛型"></a>集合与泛型</h1><h2 id="List-List-List-lt-gt-的区别"><a href="#List-List-List-lt-gt-的区别" class="headerlink" title="List,List,List&lt;?&gt;的区别"></a>List,List<object>,List&lt;?&gt;的区别</object></h2><p>List表示能够放入任意类型的数据，List<object>表示只能够放入Object类型的数据。&lt;? extends T&gt;表示可以赋值任何T及T的子类，上界为T，&lt;? super T&gt;表示可以放入任何T及T的父类，下界为T。</object></p><h2 id="fail-fast机制"><a href="#fail-fast机制" class="headerlink" title="fail-fast机制"></a>fail-fast机制</h2><p>java.util包下的所有集合类都是fail-fast,即当检测到遍历的同时发生了修改，会立即抛出ConcurrentModificationException异常。相对应的就是fail-safe,concurrent包内的都是fail-safe，为了避免此类情况，可以使用并发容器CopyOnWriteArrayList代替ArrayList，实行读写分离，如果是写操作，则复制一个新集合，在新集合内添加或删除元素，待一切修改完成后再将原集合的引用指向新的集合。COW的缺点也很明显，就是读不到最新的数据，这也是CAP理论中C与A的矛盾，即一致性和可用性的矛盾。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲解List源码部分常使用的方法及注意事项&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://blog.examplecn.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.examplecn.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JVM配置参数列表及说明</title>
    <link href="https://blog.examplecn.com/2019/02/25/JVM%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E5%8F%8A%E8%AF%B4%E6%98%8E/"/>
    <id>https://blog.examplecn.com/2019/02/25/JVM配置参数列表及说明/</id>
    <published>2019-02-25T06:35:20.000Z</published>
    <updated>2019-04-02T06:26:50.956Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要提供jvm中各种jvm配置参数的解释，具体如何配置还需要根据使用环境而定，这里只标明每个参数配置项的意义</p><a id="more"></a><h1 id="JVM配置参数列表"><a href="#JVM配置参数列表" class="headerlink" title="JVM配置参数列表"></a>JVM配置参数列表</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-Xmx3550m               # 设置jvm最大可用内存大小为3550m</span><br><span class="line">-Xms3550m               # 设置jvm初始内存为3550m.此设置可与Xmx相同，避免每次垃圾回收后jvm重新分配内存</span><br><span class="line">-Xmn2g                  # 设置年轻代为2g，整个堆大小=年轻代大小+年老代大小+持久代大小。持久代一般固定大小为64m，所以增大年轻代后，将会减少年老代大小，此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8</span><br><span class="line">-Xss128k                # 设置每个线程的堆栈大小。JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。更具应用的线程所需内存大小进行调整。在相同物理内 存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</span><br><span class="line"></span><br><span class="line">-XX:NewRatio=4          # 设置年轻代（包括Eden和两个Survivo区）与年老代的比值，除去持久代。设置为4,则年轻代与年老代所占比值为1:4，年轻代占整个堆栈的1/5</span><br><span class="line">-XX:SurvivorRatio=4     # 设置年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4,一个Servivor区占整个年轻代的1/6</span><br><span class="line">-XX:MaxTenuringThreshold=0      # 设置垃圾最大年轻。如果设置为0,则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象在年轻代的存活时间，增加在年轻代被回收的概率。</span><br><span class="line"></span><br><span class="line">-XX:PermSize=64m                #设置非堆内存初始值，默认是物理内存的1/64，在数据量很大的文件导出时，一定要把这个值设置上，否则会出现内存溢出。</span><br><span class="line">-XX:MaxPermSize=16m             # 设置最大非堆内存的大小，默认是物理内存的1/4。那么，如果是物理内存4GB，那么64分之一就是64MB，这就是PermSize默认值，也就是永生代内存初始大小；四分之一是1024MB，这就是MaxPermSize默认大小。</span><br><span class="line"># MaxPermSize缺省值和-server -client选项相关。</span><br><span class="line"># -server选项下默认MaxPermSize为64m</span><br><span class="line"># -client选项下默认MaxPermSize为32m</span><br><span class="line"># 这两个参数现在JDK8中被-XX:MetaspaceSize=size和-XX:MaxMetaspaceSize=size元空间所替代</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要提供jvm中各种jvm配置参数的解释，具体如何配置还需要根据使用环境而定，这里只标明每个参数配置项的意义&lt;/p&gt;
    
    </summary>
    
      <category term="jvm" scheme="https://blog.examplecn.com/categories/jvm/"/>
    
    
      <category term="JVM" scheme="https://blog.examplecn.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>java中hashCode与hash算法简介</title>
    <link href="https://blog.examplecn.com/2018/10/20/hash/"/>
    <id>https://blog.examplecn.com/2018/10/20/hash/</id>
    <published>2018-10-20T12:46:25.000Z</published>
    <updated>2019-06-09T07:51:16.174Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要说明java中hashCode的计算方式以及hash算法，基于我在看jdk中HashMap中不明白的地方所做的解释</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好奇心是驱动人类进步的动力，我在看HashMap的源码的时候，put方法在查询key值得存储位置的时候，使用的是key的hash值去计算的，当时我就在想，一个key的hash值是如何保证均衡分布在各个存储桶里面的？带着这个好奇，我们今天就来探究下hash散列的计算方式及其原理。</p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>在开始之前，我们先来复习一下两个基本的东西：java中的位运算，散列码</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>大家在大学的时候应该都学过位运算符，这里就只列出来，加上一点说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt; : 左移运算符，num &lt;&lt; <span class="number">1</span>,相当于num乘以<span class="number">2</span>的一次方  低位补<span class="number">0</span></span><br><span class="line">&gt;&gt; : 右移运算符，num &gt;&gt; <span class="number">1</span>,相当于num除以<span class="number">2</span>的一次方  高位补<span class="number">0</span></span><br><span class="line">&gt;&gt;&gt; : 无符号右移，忽略符号位，空位都以<span class="number">0</span>补齐</span><br><span class="line"> % : 模运算 取余</span><br><span class="line">^ :   位异或 第一个操作数的的第n位于第二个操作数的第n位相反，那么结果的第n为也为<span class="number">1</span>，否则为<span class="number">0</span></span><br><span class="line"> &amp; : 与运算 第一个操作数的的第n位于第二个操作数的第n位如果都是<span class="number">1</span>，那么结果的第n为也为<span class="number">1</span>，否则为<span class="number">0</span></span><br><span class="line"> | :  或运算 第一个操作数的的第n位于第二个操作数的第n位 只要有一个是<span class="number">1</span>，那么结果的第n为也为<span class="number">1</span>，否则为<span class="number">0</span></span><br><span class="line"> ~ : 非运算 操作数的第n位为<span class="number">1</span>，那么结果的第n位为<span class="number">0</span>，反之，也就是取反运算（一元操作符：只操作一个数)</span><br></pre></td></tr></table></figure><h2 id="散列算法"><a href="#散列算法" class="headerlink" title="散列算法"></a>散列算法</h2><p>又称哈希算法，杂凑算法，是一种从任意文件中创造小的数字「指纹」的方法。与指纹一样，散列算法就是一种以较短的信息来保证文件唯一性的标志，这种标志与文件的每一个字节都相关，而且难以找到逆向规律。因此，当原有文件发生改变时，其标志值也会发生改变，从而告诉文件使用者当前的文件已经不是你所需求的文件。<br>大家看一下Object中的hashCode方法就会发现，java中的hashCode方法是根据一定的规则，将与对象相关的一些信息（比如对象的地址，字段等）处理成一个int数值，这个值就称作散列码。从这里就可以看出，其hashCode的值只是和对象的内存地址有一定的关联，并不是返回的对象的内存地址</p><h1 id="Hash算法有什么特点？"><a href="#Hash算法有什么特点？" class="headerlink" title="Hash算法有什么特点？"></a>Hash算法有什么特点？</h1><p>一个优秀的 hash 算法，将能实现：</p><ul><li>正向快速：给定明文和 hash 算法，在有限时间和有限资源内能计算出 hash 值。</li><li>逆向困难：给定（若干） hash 值，在有限时间内很难（基本不可能）逆推出明文。</li><li>输入敏感：原始输入信息修改一点信息，产生的 hash 值看起来应该都有很大不同。</li><li>冲突避免：很难找到两段内容不同的明文，使得它们的 hash 值一致（发生冲突）。即对于任意两个不同的数据块，其hash值相同的可能性极小；对于一个给定的数据块，找到和它hash值相同的数据块极为困难。</li></ul><h1 id="String中的hashCode计算方式"><a href="#String中的hashCode计算方式" class="headerlink" title="String中的hashCode计算方式"></a>String中的hashCode计算方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = hash;</span><br><span class="line">        <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">                h = <span class="number">31</span> * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码很简单，将字符串转换成字符数组，前一个字符的hash值x31+当前字符的unicode码，例如，字符串”abc”,字符串中hash的初始值是0,a的unocide码是97,31x0+97，a的hashCode就是97,hash值也变成了97,b的计算方式就是97x31+98=3105,c的就是3105x31+99=96354,最终，“abc”的hashCode就是96354,不信的大家可以验证下。</p><h1 id="为何很多hashCode方法都是使用的31"><a href="#为何很多hashCode方法都是使用的31" class="headerlink" title="为何很多hashCode方法都是使用的31"></a>为何很多hashCode方法都是使用的31</h1><p>大家用eclipse生成hashCode方法的时候会发现,返回的hashCode是用31加上字段的hashCode码，为何是31呢，这个原因在《Effective Java》这本书里有说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">之所以使用 31， 是因为他是一个奇素数。如果乘数是偶数，并且乘法溢出的话，信息就会丢失，因为与2相乘等价于移位运算（低位补0）。使用素数的好处并不很明显，但是习惯上使用素数来计算散列结果。 31 有个很好的性能，即用移位和减法来代替乘法，可以得到更好的性能： 31 * i == (i &lt;&lt; 5） - i， 现代的 VM 可以自动完成这种优化。这个公式可以很简单的推导出来。</span><br></pre></td></tr></table></figure><p>这里可以看出，使用31还是为了性能。</p><h1 id="Hash在管理数据结构中的应用"><a href="#Hash在管理数据结构中的应用" class="headerlink" title="Hash在管理数据结构中的应用"></a>Hash在管理数据结构中的应用</h1><p>在用到hash进行管理的数据结构中，对hash速度比较重视，对于碰撞检测不太看中，只要保证hash均匀分布就可以。比如hashmap，hash值（key）存在的目的是加速键值对的查找，key的作用是为了将元素适当地放在各个桶里，对于碰撞检测的要求没有那么高。换句话说，hash出来的key，只要保证value大致均匀的放在不同的桶里就可以了。但整个算法的set性能，直接与hash值产生的速度有关，所以这时候的hash值的产生速度就尤为重要.</p><h1 id="HashMap中的hash算法实现"><a href="#HashMap中的hash算法实现" class="headerlink" title="HashMap中的hash算法实现"></a>HashMap中的hash算法实现</h1><p>我们知道，HashMap中计算key的hash值是为了key均匀分布，大家看一下下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="comment">//计算hashCode，并无符号移动到低位</span></span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里可以看出，其key的hash值是取hashCode码与hashCode码无符号右移16位做异或运算，但是，为什么要右移16位呢，举个例子: 363771819^(363771819 &gt;&gt;&gt; 16)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0001 0101 1010 1110 1011 0111 1010 1011(363771819)</span><br><span class="line">0000 0000 0000 0000 0001 0101 1010 1110(5550) XOR</span><br><span class="line">--------------------------------------- =</span><br><span class="line">0001 0101 1010 1110 1010 0010 0000 0101(363766277)</span><br></pre></td></tr></table></figure><p>这样做可以实现使高低位更加均匀地混到一起。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>下面给出在Java中几个常用的哈希码(hashCode)的算法。</p><ol><li><p>Object类的hashCode. 返回对象的经过处理后的内存地址，由于每个对象的内存地址都不一样，所以哈希码也不一样。这个是native方法，取决于JVM的内部设计，一般是某种C地址的偏移。</p></li><li><p>String类的hashCode. 根据String类包含的字符串的内容，根据一种特殊算法返回哈希码，只要字符串的内容相同，返回的哈希码也相同。</p></li><li><p>Integer等包装类，返回的哈希码就是Integer对象里所包含的那个整数的数值，例如Integer i1=new Integer(100), i1.hashCode的值就是100 。由此可见，2个一样大小的Integer对象，返回的哈希码也一样。</p></li><li><p>int，char这样的基础类，它们不需要hashCode，如果需要存储时，将进行自动装箱操作，计算方法同上。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要说明java中hashCode的计算方式以及hash算法，基于我在看jdk中HashMap中不明白的地方所做的解释&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://blog.examplecn.com/categories/java/"/>
    
    
      <category term="java" scheme="https://blog.examplecn.com/tags/java/"/>
    
      <category term="算法" scheme="https://blog.examplecn.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深入理解mybatis(一)，mybatis初始化机制初探</title>
    <link href="https://blog.examplecn.com/2018/05/30/mybatis1/"/>
    <id>https://blog.examplecn.com/2018/05/30/mybatis1/</id>
    <published>2018-05-30T06:52:00.000Z</published>
    <updated>2019-04-02T06:26:50.960Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍mybatis的初始化机制，从配置文件加载一直到初始化完成的过程。</p><a id="more"></a><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p>让我们先来写一个简单的mybatis操作mysql数据库的demo</p><p>1.创建一个maven项目，并引入mybatis,mysql依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.46&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.在源码根目录下创建配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">&lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">&lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">&lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;password&quot; value=&quot;123456&quot; /&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;mapper resource=&quot;com/mtoliv/mybatis/mapper/BlogMapper.xml&quot; /&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>3.创建model，BlogMapper.xml文件和BlogMapper.java文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Blog implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">private static final long serialVersionUID = -4958441314416958973L;</span><br><span class="line"></span><br><span class="line">private Long id;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">public Long getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setId(Long id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.mtoliv.mybatis.dao.BlogMapper&quot;&gt;</span><br><span class="line">&lt;select id=&quot;selectBlog&quot; resultType=&quot;com.mtoliv.mybatis.model.Blog&quot;&gt;</span><br><span class="line">select * from Blog where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface BlogMapper &#123;</span><br><span class="line"></span><br><span class="line">public Blog selectBlog(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.初始化，调用接口，获取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line">Blog blog = blogMapper.selectBlog(1L);</span><br><span class="line">System.out.println(blog.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mybatis-config配置文件解析源码"><a href="#mybatis-config配置文件解析源码" class="headerlink" title="mybatis-config配置文件解析源码"></a>mybatis-config配置文件解析源码</h1><ol><li><p>使用XMLConfigBuilder解析xml文件，读出其中的各个配置项，处理成Configuration对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private void parseConfiguration(XNode root) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line">      propertiesElement(root.evalNode(&quot;properties&quot;));</span><br><span class="line">      Properties settings = settingsAsProperties(root.evalNode(&quot;settings&quot;));</span><br><span class="line">      loadCustomVfs(settings);</span><br><span class="line">      typeAliasesElement(root.evalNode(&quot;typeAliases&quot;));</span><br><span class="line">      pluginElement(root.evalNode(&quot;plugins&quot;));</span><br><span class="line">      objectFactoryElement(root.evalNode(&quot;objectFactory&quot;));</span><br><span class="line">      objectWrapperFactoryElement(root.evalNode(&quot;objectWrapperFactory&quot;));</span><br><span class="line">      reflectorFactoryElement(root.evalNode(&quot;reflectorFactory&quot;));</span><br><span class="line">      settingsElement(settings);</span><br><span class="line"></span><br><span class="line">      environmentsElement(root.evalNode(&quot;environments&quot;));</span><br><span class="line">      databaseIdProviderElement(root.evalNode(&quot;databaseIdProvider&quot;));</span><br><span class="line">      typeHandlerElement(root.evalNode(&quot;typeHandlers&quot;));</span><br><span class="line">      mapperElement(root.evalNode(&quot;mappers&quot;));</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      throw new BuilderException(&quot;Error parsing SQL Mapper Configuration. Cause: &quot; + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Configuration对象，创建DefaultSqlSessionFactory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public SqlSessionFactory build(Configuration config) &#123;</span><br><span class="line">    return new DefaultSqlSessionFactory(config);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>这两步完成后，一个SqlSessionFactory就创建出来了</p><h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p>创建者模式：在解析xml，生成Configuration的过程中，由XMLConfigBuilder解析xml文件并生成Configuration,这为后面直接通过java配置mybatis运行环境提供了便利<br>工厂模式：DefaultSqlSessionFactory使用Configuration对象创建会话工厂，负责管理会话的创建，销毁等动作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要介绍mybatis的初始化机制，从配置文件加载一直到初始化完成的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="mybatis" scheme="https://blog.examplecn.com/categories/mybatis/"/>
    
    
      <category term="深入理解mybatis" scheme="https://blog.examplecn.com/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3mybatis/"/>
    
  </entry>
  
  <entry>
    <title>JVM探秘（二）类文件结构--Class类文件的结构</title>
    <link href="https://blog.examplecn.com/2018/05/27/jvm2/"/>
    <id>https://blog.examplecn.com/2018/05/27/jvm2/</id>
    <published>2018-05-27T14:06:25.000Z</published>
    <updated>2018-10-22T09:39:21.762Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章按照之前已经拟定好的顺序，首先来介绍类文件结构的第一部分：Class类文件的结构。</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>“一次编写，到处运行”，这是java在刚刚诞生时提出的宣传口号，时至今日，JVM已经发展成了多种语言的运行平台，达成了两个方面：语言无关性和平台无关性，语言无关性是指：只要语言代码能被编译成存储字节码的Class文件，一样能够在jvm上运行，jvm不关心原代码是用什么编写的，平台无关性是指：同样的代码，在不同平台上的运行结果一致，其中Class文件的内容结构是构成这一切的基石。Class内容的来源可以有很多种，最多的就是源代码代码编译生成class文件，还有java的动态字节码技术也可以生成class。</p><h1 id="ClassFile的结构"><a href="#ClassFile的结构" class="headerlink" title="ClassFile的结构"></a>ClassFile的结构</h1><p>Class文件是一组以8位字节为基础单位的二进制流，各个数据项严格按照规定顺序紧凑的排列在Class文件中，中间没有任何分隔符号，也没有空隙。如果有需要占用8位字节以上的空间的数据项，则会按照高位在前的方式分割成若干个8位字节进行存储。根据JVM规范的规定，Class文件采用一种类似于C语言结构的伪结构来存储数据，这种结构只有两种数据类型：无符号数和表，JVM解析所有的结构都会以这两种类型为基础。</p><p>1.无符号数：JVM中的基本数据类型，以u1,u2,u4,u8分别代表1个，2个，4个，8个字节的无符号数，一个字节是8位二进制数。无符号数可以描述数字，索引引用，数量值或者按照UTF-8编码的字符串值</p><p>2.表：由多个无符号数或者其他表作为数据项的复合数据类型，以_info结尾。整个Class文件本质上就是一张表,表中包含:magic,minor_version,major_version,constant_pool_count,constant_pool[cconstant_pool_count-1],assess_flags,this_class,super_class,interfaces_count,interfaces[interfaces_count],fields_count,fields[fields_count],methods_count,methods[methods_count],attributies_count,attributies[attributies_count]这些数据项，无论是无符号数还是表，当需要描述同一类型但数量不定的多个数据时，经常会使用一个前置的计数器加上若干个连续的数据项的形式，下面将一一介绍。</p><h2 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h2><p>magic的数据类型是u4,每个class文件的头4个字节成为magic,magic的唯一作用就是确定这个文件是否是一个能被jvm所接受的class文件，固定值：0xCAFEBABY,不会改变</p><h2 id="minor-version-父版本号-major-version-主版本号"><a href="#minor-version-父版本号-major-version-主版本号" class="headerlink" title="minor_version(父版本号),major_version(主版本号)"></a>minor_version(父版本号),major_version(主版本号)</h2><p>紧接着magic出现的4个字节存储的是class文件的版本号,第五和第六个字节是次版本号，第七和第八个字节是主版本号，这两个共同构成了class文件的版本号，jvm拒绝执行超过其版本号的class文件，即使文件格式完全符合其要求也不行。</p><h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><p>紧接着主版本号之后的是常量池的入口，前两个字节表示常量池的大小，这个容量计数是从1而不是从0开始的，这样做是为了满足后面某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量”的含义，这种情况可以把索引值置为0来表示。Class文件中只有常量池的容量计数是从1开始，其它的都是从0开始。<br>常量池中主要存放2大类常量，字面量和符号引用.<br>字面量：如文本字符串，声明为final的常量等。<br>符号引用：类和接口的全限定名，字段的名称和描述符，方法的名称和描述符。<br>Class文件中不会保存各个方法，字段的最终内存布局信息，当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建或者运行时解析，翻译到具体的内存地址之中。<br>常量池中每一项常量都是一个表，在jdk7之前共有11种结构各不相同的表结构，7之后为了支持动态语言调用，增加了CONSTANT_MethodHandle_info,CONSTANT_MethodType_info和CONSTANT_InvokeDynamic_info。<br>这14种表的共同点就是表开始的第一位是一个u1类型的标志位，代表当前这个常量表属于哪种类型。14种常量类型和标志位见下表所示。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章按照之前已经拟定好的顺序，首先来介绍类文件结构的第一部分：Class类文件的结构。&lt;/p&gt;
    
    </summary>
    
      <category term="jvm" scheme="https://blog.examplecn.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://blog.examplecn.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM探秘（一）博客顺序</title>
    <link href="https://blog.examplecn.com/2018/05/26/jvm1/"/>
    <id>https://blog.examplecn.com/2018/05/26/jvm1/</id>
    <published>2018-05-26T12:46:25.000Z</published>
    <updated>2019-06-09T07:57:59.483Z</updated>
    
    <content type="html"><![CDATA[<p>本文是jvm探秘系列的第一篇，主要简述jvm学习的路径</p><a id="more"></a><h1 id="JVM学习路径"><a href="#JVM学习路径" class="headerlink" title="JVM学习路径"></a>JVM学习路径</h1><p>主要参考数据：深入理解java虚拟机：JVM高级特性与最佳实践</p><h1 id="博客计划"><a href="#博客计划" class="headerlink" title="博客计划"></a>博客计划</h1><p>系列博客会以编译-&gt;class文件格式及内容-&gt;类加载-&gt;jvm内存模型，内存分配-&gt;垃圾回收-&gt;java并发编程及底层原理-&gt;性能调优实践的顺序逐渐揭开jvm的<br>神秘面纱，同时，中间可能会穿插各种框架的深入探究，希望大家能从我的系列博客中，有所收获，也欢迎大家在我的每篇博客下讨论，这对我来说也是一种激励，鼓励博主不要断更。</p><h1 id="主要目标"><a href="#主要目标" class="headerlink" title="主要目标"></a>主要目标</h1><p>我自己想要达到的最终目标是：</p><ol><li>对jvm的方方面面要能够了如指掌，至少在出现问题时能够通过已经掌握的知识定位问题的根本原因。</li><li>提升自己，有所突破。</li><li>对java有更加深刻理解</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是jvm探秘系列的第一篇，主要简述jvm学习的路径&lt;/p&gt;
    
    </summary>
    
      <category term="jvm" scheme="https://blog.examplecn.com/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://blog.examplecn.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>nginx编译安装，启用http2</title>
    <link href="https://blog.examplecn.com/2017/12/19/nginxinstall/"/>
    <id>https://blog.examplecn.com/2017/12/19/nginxinstall/</id>
    <published>2017-12-19T08:16:25.000Z</published>
    <updated>2018-10-22T09:39:21.764Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍nginx在centos7版本中的源代码编译安装及http2启用的步骤。</p><a id="more"></a><h2 id="nginx编译安装"><a href="#nginx编译安装" class="headerlink" title="nginx编译安装"></a>nginx编译安装</h2><h3 id="gcc安装"><a href="#gcc安装" class="headerlink" title="gcc安装"></a>gcc安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><h3 id="PCRE安装"><a href="#PCRE安装" class="headerlink" title="PCRE安装"></a>PCRE安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><h3 id="zlib安装"><a href="#zlib安装" class="headerlink" title="zlib安装"></a>zlib安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><h3 id="openssl安装"><a href="#openssl安装" class="headerlink" title="openssl安装"></a>openssl安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="nginx编译安装与配置"><a href="#nginx编译安装与配置" class="headerlink" title="nginx编译安装与配置"></a>nginx编译安装与配置</h3><pre><code>官方下载nginx源码[[nginx下载地址](http://nginx.org/en/download.html)]</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="1-默认配置"><a href="#1-默认配置" class="headerlink" title="(1.默认配置)"></a>(1.默认配置)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置ssl模块，realip模块，socket转发模块,http2模块</span></span><br><span class="line">./configure --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-stream --with-http_v2_module</span><br></pre></td></tr></table></figure><p>#####（2.自定义配置）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/nginx \</span><br><span class="line">--conf-path=/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf \</span><br><span class="line">--pid-path=/usr/<span class="built_in">local</span>/nginx/conf/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/<span class="built_in">log</span>/nginx/error.log \</span><br><span class="line">--http-log-path=/var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># nginx会默认安装到/usr/local/nginx目录下</span></span><br></pre></td></tr></table></figure><h3 id="模块选项"><a href="#模块选项" class="headerlink" title="模块选项"></a>模块选项</h3><table><thead><tr><th align="left">默认禁用模块</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-–without-http_charset_module</td><td align="left">禁用Charset模块，该模块用于对网页重新编码</td></tr><tr><td align="left">-–without-http_gzip_module</td><td align="left">禁用gzip压缩模块</td></tr><tr><td align="left">-–without-http_ssi_module</td><td align="left">禁用服务端包含模块</td></tr><tr><td align="left">-–without-http_userid_module</td><td align="left">禁用用户ID模块，该模块为用户通过cookie验证身份</td></tr><tr><td align="left">-–without-http_access_module</td><td align="left">禁用访问模块，对于指定的IP段，允许访问配置</td></tr><tr><td align="left">-–without-http_auth_basic_module</td><td align="left">禁用基本的认证模块</td></tr><tr><td align="left">-–without-http_autoindex_module</td><td align="left">禁用自动索引模块</td></tr><tr><td align="left">-–without-http_geo_module</td><td align="left">禁用Geo模块，该模块允许你定义依赖于IP地址段的变量</td></tr><tr><td align="left">-–without-http_map_module</td><td align="left">禁用map模块，该模块允许你定义map区段</td></tr><tr><td align="left">-–without-http_referer_module</td><td align="left">禁用referer控制模块</td></tr><tr><td align="left">-–without-http_rewrite_module</td><td align="left">禁用rewrite模块</td></tr><tr><td align="left">-–without-http_proxy_module</td><td align="left">禁用代理模块，该模块用于向其他服务器传输请求</td></tr><tr><td align="left">-–without-http_fastcgi_module</td><td align="left">禁用FastCGI模块，该模块用于和FastCGI进程配合工作</td></tr><tr><td align="left">-–without-http_memcached_module</td><td align="left">禁用memcached模块</td></tr><tr><td align="left">-–without-http_limit_req_module</td><td align="left">禁用Limit Request模块，该模块允许限制每个用户请求总数</td></tr><tr><td align="left">-–without-http_empty_gif_module</td><td align="left">禁用Empty Gif模块，该模块用于在内存中提供空白GIF图像</td></tr><tr><td align="left">-–without-http_browser_module</td><td align="left">禁用Browser模块，该模块用于解释用户代理字符串</td></tr><tr><td align="left">-–without-http_upstream_ip_hash_module</td><td align="left">禁用Upstream模块，该模块用于配置负载均衡结构</td></tr></tbody></table><table><thead><tr><th align="left">默认开启模块</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-–with-http_ssl_module</td><td align="left">开启SSL模块，支持使用HTTPS协议的网页</td></tr><tr><td align="left">-–with-http_realip_module</td><td align="left">开启Real IP支持，该模块用于从用户的请求头数据中读取real IP地址</td></tr><tr><td align="left">-–with-http_addition_module</td><td align="left">开启Addition模块，该模块允许你追加或前置数据到响应的主体部分</td></tr><tr><td align="left">-–with-http_xslt_module</td><td align="left">开启XLST模块，该模块实现XLST转化为XML文档</td></tr><tr><td align="left">-–with-http_image_filter_module</td><td align="left">开启Image Filter模块，该模块允许修改图像(注意：若编译该模块，需安装libgd库)</td></tr><tr><td align="left">-–with-http_geoip_module</td><td align="left">开启GeoIP模块，该模块通过使用MaxMind’s GeoI二进制数据库来获取客户端在地理上的分布(注意：如果希望编译该模块，需要安装libgeoip)</td></tr><tr><td align="left">-–with-http_sub_module</td><td align="left">开启Substitution模块，该模块用于在网页中替换文本</td></tr><tr><td align="left">-–with-http_dav_module</td><td align="left"></td></tr><tr><td align="left">-–with-http_flv_module</td><td align="left">开启FLV模块，该模块用于处理.flv(flash视频)文件</td></tr><tr><td align="left">-–with-http_gzip_static_module</td><td align="left">开启Gzip静态模块，该模块用于发送预压缩文件</td></tr><tr><td align="left">-–with-http_random_index_module</td><td align="left">开启Random Index模块，该模块用于挑选一个随机的文件作为该目录的index</td></tr><tr><td align="left">-–with-http_secure_link_module</td><td align="left">开启Secure Link模块，该模块用于在URL中检测关键字的存在</td></tr><tr><td align="left">-–with-http_stub_status_module</td><td align="left">开启Stub Status模块，该模块会产生一个服务器状态和信息页</td></tr><tr><td align="left">-–with-google_perftools_module</td><td align="left">开启google性能工具</td></tr></tbody></table><table><thead><tr><th align="left">其他选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-–with-ipv6</td><td align="left">开启对ipv6支持</td></tr><tr><td align="left">-–without-http</td><td align="left">禁用http服务</td></tr><tr><td align="left">-–without-http-cache</td><td align="left">禁用http缓冲功能</td></tr><tr><td align="left">-–add-module</td><td align="left">通过指定的路径编译添加第三方模块，如果需要编译多个模块，该选项可以多次使用</td></tr><tr><td align="left">-–with-debug</td><td align="left">开启记录额外调试信息</td></tr><tr><td align="left">–with-openssl</td><td align="left">编译时配置openssl源码目录，–with-openssl=/usr/local/openssl-1.0.2h</td></tr></tbody></table><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><h4 id="启用http2"><a href="#启用http2" class="headerlink" title="启用http2"></a>启用http2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen   443 ssl http2;</span><br><span class="line">        server_name  172.16.37.66;</span><br><span class="line"></span><br><span class="line">        ssl_certificate     certs/cert.crt;</span><br><span class="line">        ssl_certificate_key certs/cert.key;</span><br><span class="line"></span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop <span class="comment">#停止</span></span><br><span class="line">./nginx -s quit <span class="comment">#优雅退出</span></span><br><span class="line">./nginx -s reload <span class="comment">#重新加载配置信息</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍nginx在centos7版本中的源代码编译安装及http2启用的步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="https://blog.examplecn.com/categories/nginx/"/>
    
    
      <category term="nginx安装" scheme="https://blog.examplecn.com/tags/nginx%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>consulServer系列（一）：consul单机版安装</title>
    <link href="https://blog.examplecn.com/2017/12/17/consulserver1/"/>
    <id>https://blog.examplecn.com/2017/12/17/consulserver1/</id>
    <published>2017-12-17T11:50:58.000Z</published>
    <updated>2018-10-22T09:39:21.760Z</updated>
    
    <content type="html"><![CDATA[<p>本篇为consul系列的开篇，主要介绍consul服务端的安装与使用。照例，使用版本依然为consul截止目前为止的最新版</p><a id="more"></a><ol><li><p>从官方网站下载consul软件。[<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">官方网站下载链接</a>]</p></li><li><p>解压下载好的压缩包，并以代理模式运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./consul agent -server -bootstrap -data-dir /tmp/consul/ -ui</span><br></pre></td></tr></table></figure></li></ol><p>至此，一个单机版的consul服务端就起来了，下篇将会介绍一个集群的部署方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇为consul系列的开篇，主要介绍consul服务端的安装与使用。照例，使用版本依然为consul截止目前为止的最新版&lt;/p&gt;
    
    </summary>
    
      <category term="consul" scheme="https://blog.examplecn.com/categories/consul/"/>
    
    
      <category term="consul" scheme="https://blog.examplecn.com/tags/consul/"/>
    
      <category term="consulServer" scheme="https://blog.examplecn.com/tags/consulServer/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudLearn系列（二）：服务注册consul版</title>
    <link href="https://blog.examplecn.com/2017/12/17/springcloudconsulclient/"/>
    <id>https://blog.examplecn.com/2017/12/17/springcloudconsulclient/</id>
    <published>2017-12-17T11:38:58.000Z</published>
    <updated>2018-10-22T09:39:21.764Z</updated>
    
    <content type="html"><![CDATA[<p>本文是SpringCloudLearn系列的第二篇，consul服务端安装及使用请参考官方文档，后续还会出文章讲解如何安装consul服务端，本篇文章只讲述consul客户端的配置。<br>相关完整示例请转向到以下地址：<br>[<a href="https://github.com/pengjieran/SpringCloudLearn" target="_blank" rel="noopener">SpringCloudLearn系列示例</a>]</p><a id="more"></a><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ol><li>新建maven项目</li><li>pom.xml完整配置：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-discovery-client-consul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-discovery-client-consul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>springcloud consul端项目<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.M5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在包下新建SpringCloudDiscoveryClientConsulApplication.java文件</li><li>在该类上增加注解并配置相关信息,全部内容如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudDiscoveryClientConsulApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringCloudDiscoveryClientConsulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在src/main/resources目录下增加bootstrap.yml文件，主要配置如下:<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">ciscovery.consul.client</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">  undertow:</span></span><br><span class="line"><span class="attr">    io-threads:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    worker-threads:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure></li></ol><p>至此，一个简单的consul客户端就创建完成了，启动该服务，你就能在consul的UI界面看见该服务了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是SpringCloudLearn系列的第二篇，consul服务端安装及使用请参考官方文档，后续还会出文章讲解如何安装consul服务端，本篇文章只讲述consul客户端的配置。&lt;br&gt;相关完整示例请转向到以下地址：&lt;br&gt;[&lt;a href=&quot;https://github.com/pengjieran/SpringCloudLearn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SpringCloudLearn系列示例&lt;/a&gt;]&lt;/p&gt;
    
    </summary>
    
      <category term="springcloud" scheme="https://blog.examplecn.com/categories/springcloud/"/>
    
    
      <category term="consul" scheme="https://blog.examplecn.com/tags/consul/"/>
    
      <category term="consul客户端配置" scheme="https://blog.examplecn.com/tags/consul%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>各大IDE快捷键整理</title>
    <link href="https://blog.examplecn.com/2017/12/10/IDE%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://blog.examplecn.com/2017/12/10/IDE快捷键/</id>
    <published>2017-12-10T13:20:17.000Z</published>
    <updated>2019-04-02T06:26:50.956Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要整理各大IDE在mac平台和windows平台下的一些实用的快捷键，因为笔者也是基于这两个平台做开发，有时候忘记快捷键是一件很痛苦的事，特此记录。</p><a id="more"></a><h1 id="eclipse快捷键"><a href="#eclipse快捷键" class="headerlink" title="eclipse快捷键"></a>eclipse快捷键</h1><h2 id="mac平台下常用快捷键："><a href="#mac平台下常用快捷键：" class="headerlink" title="mac平台下常用快捷键："></a>mac平台下常用快捷键：</h2><ul><li>Command+1 快速修复</li><li>Command+d 删除当前行</li><li>Command+单击 查看源码</li><li>Command+/ 注释或反注释当前行</li><li>Command+← 移动光标至当前行的行首(Mac系统快捷键，其他文本编辑通用)</li><li>Command+→ 移动光标至当前行的行尾</li><li>Command+Option+↓ 复制当前行到下一行</li><li>Command+Option+↑ 复制当前行到上一行</li><li>Command+Option+R 批量重命名</li><li>Command+Option+S 快速生成代码，Getter&amp;Setter，Constructor等</li><li>Option+↓ 向下移动当前行</li><li>Option+↑ 向上移动当前行</li><li>Option+← 上一单词</li><li>Option+→ 下一单词</li><li>Option+回车 显示当前选择资源的属性</li><li>Option+/ 代码提示</li><li>Command+Shift+O(字母) 去掉多余的import语句</li><li>Command+Shit+f 格式化代码</li></ul><h2 id="windows平台下常用快捷键"><a href="#windows平台下常用快捷键" class="headerlink" title="windows平台下常用快捷键"></a>windows平台下常用快捷键</h2><ul><li>Ctrl+1 快速修复(最经典的快捷键,就不用多说了)</li><li>Ctrl+D: 删除当前行</li><li>Ctrl+Alt+↓ 复制当前行到下一行(复制增加)</li><li>Ctrl+Alt+↑ 复制当前行到上一行(复制增加)</li><li>Alt+↓ 当前行和下面一行交互位置(特别实用,可以省去先剪切,再粘贴了)</li><li>Alt+↑ 当前行和上面一行交互位置(同上)</li><li>Alt+← 前一个编辑的页面</li><li>Alt+→ 下一个编辑的页面(当然是针对上面那条来说了)</li><li>Alt+Enter 显示当前选择资源(工程,or 文件 or文件)的属性</li><li>Shift+Enter 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)</li><li>Shift+Ctrl+Enter 在当前行插入空行(原理同上条)</li><li>Ctrl+Q 定位到最后编辑的地方</li><li>Ctrl+L 定位在某行 (对于程序超过100的人就有福音了)</li><li>Ctrl+M 最大化当前的Edit或View (再按则反之)</li><li>Ctrl+/ 注释当前行,再按则取消注释</li><li>Ctrl+O 快速显示 OutLine</li><li>Ctrl+T 快速显示当前类的继承结构</li><li>Ctrl+W 关闭当前Editer</li><li>Ctrl+K 参照选中的Word快速定位到下一个</li><li>Ctrl+E 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)</li><li>Ctrl+/(小键盘) 折叠当前类中的所有代码</li><li>Ctrl+×(小键盘) 展开当前类中的所有代码</li><li>Ctrl+Space 代码助手完成一些代码的插入(但一般和输入法有冲突,可以修改输入法的热键,也可以暂用Alt+/来代替)</li><li>Ctrl+Shift+E 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)</li><li>Ctrl+J 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到了,查一个单词时,特别实用,这个功能Idea两年前就有了)</li><li>Ctrl+Shift+J 反向增量查找(和上条相同,只不过是从后往前查)</li><li>Ctrl+Shift+F4 关闭所有打开的Editer</li><li>Ctrl+Shift+X 把当前选中的文本全部变味小写</li><li>Ctrl+Shift+Y 把当前选中的文本全部变为小写</li><li>Ctrl+Shift+F 格式化当前代码</li><li>Ctrl+Shift+P 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)</li></ul><p>下面的快捷键是重构里面常用的,本人就自己喜欢且常用的整理一下(注:一般重构的快捷键都是Alt+Shift开头的了)</p><ul><li>Alt+Shift+R 重命名 (是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力)</li><li>Alt+Shift+M 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)</li><li>Alt+Shift+C 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)</li><li>Alt+Shift+L 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)</li><li>Alt+Shift+F 把Class中的local变量变为field变量 (比较实用的功能)</li><li>Alt+Shift+I 合并变量(可能这样说有点不妥Inline)</li><li>Alt+Shift+V 移动函数和变量(不怎么常用)</li><li>Alt+Shift+Z 重构的后悔药(Undo)</li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ul><li>作用域 功能 快捷键</li><li>全局 查找并替换 Ctrl+F</li><li>文本编辑器 查找上一个 Ctrl+Shift+K</li><li>文本编辑器 查找下一个 Ctrl+K</li><li>全局 撤销 Ctrl+Z</li><li>全局 复制 Ctrl+C</li><li>全局 恢复上一个选择 Alt+Shift+↓</li><li>全局 剪切 Ctrl+X</li><li>全局 快速修正 Ctrl1+1</li><li>全局 内容辅助 Alt+/</li><li>全局 全部选中 Ctrl+A</li><li>全局 删除 Delete</li><li>全局 上下文信息 Alt+？</li><li>Alt+Shift+?</li><li>Ctrl+Shift+Space</li><li>Java编辑器 显示工具提示描述 F2</li><li>Java编辑器 选择封装元素 Alt+Shift+↑</li><li>Java编辑器 选择上一个元素 Alt+Shift+←</li><li>Java编辑器 选择下一个元素 Alt+Shift+→</li><li>文本编辑器 增量查找 Ctrl+J</li><li>文本编辑器 增量逆向查找 Ctrl+Shift+J</li><li>全局 粘贴 Ctrl+V</li><li>全局 重做 Ctrl+Y</li></ul><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><ul><li>作用域 功能 快捷键</li><li>全局 放大 Ctrl+=</li><li>全局 缩小 Ctrl+-</li></ul><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><ul><li>作用域 功能 快捷键</li><li>全局 激活编辑器 F12</li><li>全局 上一个编辑器 Ctrl+Shift+F6</li><li>全局 切换编辑器 Ctrl+Shift+W</li><li>全局 上一个视图 Ctrl+Shift+F7</li><li>全局 上一个透视图 Ctrl+Shift+F8</li><li>全局 下一个编辑器 Ctrl+F6</li><li>全局 下一个视图 Ctrl+F7</li><li>全局 下一个透视图 Ctrl+F8</li><li>文本编辑器 显示标尺上下文菜单 Ctrl+W</li><li>全局 显示视图菜单 Ctrl+F10</li><li>全局 显示系统菜单 Alt+-</li></ul><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><ul><li>作用域 功能 快捷键</li><li>Java编辑器 打开结构 Ctrl+F3</li><li>全局 打开类型 Ctrl+Shift+T</li><li>全局 打开类型层次结构 F4</li><li>全局 打开声明 F3</li><li>全局 打开外部javadoc Shift+F2</li><li>全局 打开资源 Ctrl+Shift+R</li><li>全局 后退历史记录 Alt+←</li><li>全局 前进历史记录 Alt+→</li><li>全局 上一个 Ctrl+,</li><li>全局 下一个 Ctrl+.</li><li>Java编辑器 显示大纲 Ctrl+O</li><li>全局 在层次结构中打开类型 Ctrl+Shift+H</li><li>全局 转至匹配的括号 Ctrl+Shift+P</li><li>全局 转至上一个编辑位置 Ctrl+Q</li><li>Java编辑器 转至上一个成员 Ctrl+Shift+↑</li><li>Java编辑器 转至下一个成员 Ctrl+Shift+↓</li><li>文本编辑器 转至行 Ctrl+L</li></ul><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul><li>作用域 功能 快捷键</li><li>全局 出现在文件中 Ctrl+Shift+U</li><li>全局 打开搜索对话框 Ctrl+H</li><li>全局 工作区中的声明 Ctrl+G</li><li>全局 工作区中的引用 Ctrl+Shift+G</li></ul><h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><ul><li>作用域 功能 快捷键</li><li>文本编辑器 改写切换 Insert</li><li>文本编辑器 上滚行 Ctrl+↑</li><li>文本编辑器 下滚行 Ctrl+↓</li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li>作用域 功能 快捷键</li><li>全局 保存 Ctrl+X</li><li>Ctrl+S</li><li>全局 打印 Ctrl+P</li><li>全局 关闭 Ctrl+F4</li><li>全局 全部保存 Ctrl+Shift+S</li><li>全局 全部关闭 Ctrl+Shift+F4</li><li>全局 属性 Alt+Enter</li><li>全局 新建 Ctrl+N</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li>作用域 功能 快捷键</li><li>全局 全部构建 Ctrl+B</li></ul><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><ul><li>作用域 功能 快捷键</li><li>Java编辑器 格式化 Ctrl+Shift+F</li><li>Java编辑器 取消注释 Ctrl+\</li><li>Java编辑器 注释 Ctrl+/</li><li>Java编辑器 添加导入 Ctrl+Shift+M</li><li>Java编辑器 组织导入 Ctrl+Shift+O</li><li>Java编辑器 使用try/catch块来包围 未设置，太常用了，所以在这里列出,建议自己设置。也可以使用Ctrl+1自动修正。</li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>作用域 功能 快捷键</li><li>全局 单步返回 F7</li><li>全局 单步跳过 F6</li><li>全局 单步跳入 F5</li><li>全局 单步跳入选择 Ctrl+F5</li><li>全局 调试上次启动 F11</li><li>全局 继续 F8</li><li>全局 使用过滤器单步执行 Shift+F5</li><li>全局 添加/去除断点 Ctrl+Shift+B</li><li>全局 显示 Ctrl+D</li><li>全局 运行上次启动 Ctrl+F11</li><li>全局 运行至行 Ctrl+R</li><li>全局 执行 Ctrl+U</li></ul><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ul><li>作用域 功能 快捷键</li><li>全局 撤销重构 Alt+Shift+Z</li><li>全局 抽取方法 Alt+Shift+M</li><li>全局 抽取局部变量 Alt+Shift+L</li><li>全局 内联 Alt+Shift+I</li><li>全局 移动 Alt+Shift+V</li><li>全局 重命名 Alt+Shift+R</li><li>全局 重做 Alt+Shift+Y</li></ul><h1 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h1><h2 id="自动代码"><a href="#自动代码" class="headerlink" title="自动代码"></a>自动代码</h2><p>常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码<br>例如要输入for(User user : users)只需输入user.for+Tab<br>再比如，要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可。代码标签输入完成后，按Tab，生成代码。</p><ul><li>Ctrl+Alt+O 优化导入的类和包</li><li>Alt+Insert 生成代码(如get,set方法,构造函数等)   或者右键（Generate）</li><li>fori/sout/psvm + Tab  </li><li>Ctrl+Alt+T  生成try catch  或者 Alt+enter</li><li>CTRL+ALT+T  把选中的代码放在 TRY{} IF{} ELSE{} 里</li><li>Ctrl + O 重写方法  </li><li>Ctrl + I 实现方法</li><li>Ctr+shift+U 大小写转化  </li><li>ALT+回车    导入包,自动修正  </li><li>ALT+/       代码提示</li><li>CTRL+J      自动代码  </li><li>Ctrl+Shift+J，整合两行为一行</li><li>CTRL+空格   代码提示  </li><li>CTRL+SHIFT+SPACE 自动补全代码  </li><li>CTRL+ALT+L  格式化代码  </li><li>CTRL+ALT+I  自动缩进  </li><li>CTRL+ALT+O  优化导入的类和包  </li><li>ALT+INSERT  生成代码(如GET,SET方法,构造函数等)  </li><li>CTRL+E      最近更改的代码  </li><li>CTRL+ALT+SPACE  类名或接口名提示  </li><li>CTRL+P   方法参数提示  </li><li>CTRL+Q，可以看到当前方法的声明</li><li>Shift+F6  重构-重命名 (包、类、方法、变量、甚至注释等)</li><li>Ctrl+Alt+V 提取变量</li></ul><h2 id="查询快捷键"><a href="#查询快捷键" class="headerlink" title="查询快捷键"></a>查询快捷键</h2><ul><li>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地</li><li>CTRL+ALT+ left/right 前后导航编辑过的地方</li><li>ALT+7  靠左窗口显示当前文件的结构</li><li>Ctrl+F12 浮动显示当前文件的结构</li><li>ALT+F7 找到你的函数或者变量或者类的所有引用到的地方</li><li>CTRL+ALT+F7  找到你的函数或者变量或者类的所有引用到的地方</li><li>Ctrl+Shift+Alt+N 查找类中的方法或变量</li><li>双击SHIFT 在项目的所有目录查找文件</li><li>Ctrl+N   查找类</li><li>Ctrl+Shift+N 查找文件</li><li>CTRL+G   定位行  </li><li>CTRL+F   在当前窗口查找文本  </li><li>CTRL+SHIFT+F  在指定窗口查找文本  </li><li>CTRL+R   在 当前窗口替换文本  </li><li>CTRL+SHIFT+R  在指定窗口替换文本  </li><li>ALT+SHIFT+C  查找修改的文件  </li><li>CTRL+E   最近打开的文件  </li><li>F3   向下查找关键字出现位置  </li><li>SHIFT+F3  向上一个关键字出现位置  </li><li>选中文本，按Alt+F3 ，高亮相同文本，F3逐个往下查找相同文本</li><li>F4   查找变量来源  </li><li>CTRL+SHIFT+O  弹出显示查找内容</li><li>Ctrl+W 选中代码，连续按会有其他效果</li><li>F2 或Shift+F2 高亮错误或警告快速定位</li><li>Ctrl+Up/Down 光标跳转到第一行或最后一行下</li><li>Ctrl+B 快速打开光标处的类或方法  </li><li>CTRL+ALT+B  找所有的子类  </li><li>CTRL+SHIFT+B  找变量的类  </li><li>Ctrl+Shift+上下键  上下移动代码</li><li>Ctrl+Alt+ left/right 返回至上次浏览的位置</li><li>Ctrl+X 删除行</li><li>Ctrl+D 复制行</li><li>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）</li><li>Ctrl+H 显示类结构图</li><li>Ctrl+Q 显示注释文档</li><li>Alt+F1 查找代码所在位置</li><li>Alt+1 快速打开或隐藏工程面板</li><li>Alt+ left/right 切换代码视图</li><li>ALT+ ↑/↓  在方法间快速移动定位  </li><li>CTRL+ALT+ left/right 前后导航编辑过的地方</li><li>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地</li><li>Alt+6    查找TODO</li></ul><h2 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h2><ul><li>SHIFT+ENTER 另起一行</li><li>CTRL+Z   倒退(撤销)</li><li>CTRL+SHIFT+Z  向前(取消撤销)</li><li>CTRL+ALT+F12  资源管理器打开文件夹  </li><li>ALT+F1   查找文件所在目录位置  </li><li>SHIFT+ALT+INSERT 竖编辑模式  </li><li>CTRL+F4  关闭当前窗口</li><li>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义</li><li>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</li></ul><h2 id="调试快捷键"><a href="#调试快捷键" class="headerlink" title="调试快捷键"></a>调试快捷键</h2><p>其实常用的 就是F8 F7 F9 最值得一提的 就是Drop Frame  可以让运行过的代码从头再来</p><ul><li>alt+F8          debug时选中查看值</li><li>Alt+Shift+F9，选择 Debug</li><li>Alt+Shift+F10，选择 Run</li><li>Ctrl+Shift+F9，编译</li><li>Ctrl+Shift+F8，查看断点</li><li>F7，步入</li><li>Shift+F7，智能步入</li><li>Alt+Shift+F7，强制步入</li><li>F8，步过</li><li>Shift+F8，步出</li><li>Alt+Shift+F8，强制步过</li><li>Alt+F9，运行至光标处</li><li>Ctrl+Alt+F9，强制运行至光标处</li><li>F9，恢复程序</li><li>Alt+F10，定位到断点<h2 id="重构-1"><a href="#重构-1" class="headerlink" title="重构"></a>重构</h2></li><li>Ctrl+Alt+Shift+T，弹出重构菜单</li><li>Shift+F6，重命名</li><li>F6，移动</li><li>F5，复制</li><li>Alt+Delete，安全删除</li><li>Ctrl+Alt+N，内联</li></ul><h2 id="十大Intellij-IDEA快捷键"><a href="#十大Intellij-IDEA快捷键" class="headerlink" title="十大Intellij IDEA快捷键"></a>十大Intellij IDEA快捷键</h2><p>Intellij IDEA中有很多快捷键让人爱不释手，stackoverflow上也有一些有趣的讨论。每个人都有自己的最爱，想排出个理想的榜单还真是困难。<br>以前也整理过Intellij的快捷键，这次就按照我日常开发时的使用频率，简单分类列一下我最喜欢的十大快捷-神-键吧。</p><ol><li>智能提示:</li></ol><p>Intellij首当其冲的当然就是Intelligence智能！基本的代码提示用Ctrl+Space，还有更智能地按类型信息提示Ctrl+Shift+Space，但因为Intellij总是随着我们敲击而自动提示，所以很多时候都不会手动敲这两个快捷键(除非提示框消失了)。用F2/ Shift+F2移动到有错误的代码，Alt+Enter快速修复(即Eclipse中的Quick Fix功能)。当智能提示为我们自动补全方法名时，我们通常要自己补上行尾的反括号和分号，当括号嵌套很多层时会很麻烦，这时我们只需敲Ctrl+Shift+Enter就能自动补全末尾的字符。而且不只是括号，例如敲完if/for时也可以自动补上{}花括号。<br>最后要说一点，Intellij能够智能感知Spring、Hibernate等主流框架的配置文件和类，以静制动，在看似“静态”的外表下，智能地扫描理解你的项目是如何构造和配置的。</p><ol start="2"><li>重构:<br>Intellij重构是另一完爆Eclipse的功能，其智能程度令人瞠目结舌，比如提取变量时自动检查到所有匹配同时提取成一个变量等。尤其看过《重构-改善既有代码设计》之后，有了Intellij的配合简直是令人大呼过瘾！也正是强大的智能和重构功能，使Intellij下的TDD开发非常顺畅。</li></ol><p>切入正题，先说一个无敌的重构功能大汇总快捷键Ctrl+Shift+Alt+T，叫做Refactor This。按法有点复杂，但也符合Intellij的风格，很多快捷键都要双手完成，而不像Eclipse不少最有用的快捷键可以潇洒地单手完成(不知道算不算Eclipse的一大优点)，但各位用过Emacs的话就会觉得也没什么了(非Emacs黑)。此外，还有些最常用的重构技巧，因为太常用了，若每次都在Refactor This菜单里选的话效率有些低。比如Shift+F6直接就是改名，Ctrl+Alt+V则是提取变量。</p><ol start="3"><li>代码生成：<br>这一点类似Eclipse，虽不是独到之处，但因为日常使用频率极高，所以还是罗列在榜单前面。常用的有fori/sout/psvm+Tab即可生成循环、System.out、main方法等boilerplate样板代码，用Ctrl+J可以查看所有模板。后面“辅助”一节中将会讲到Alt+Insert，在编辑窗口中点击可以生成构造函数、toString、getter/setter、重写父类方法等。这两个技巧实在太常用了，几乎每天都要生成一堆main、System.out和getter/setter。</li></ol><p>另外，Intellij IDEA 13中加入了后缀自动补全功能(Postfix Completion)，比模板生成更加灵活和强大。例如要输入for(User user : users)只需输入user.for+Tab。再比如，要输入Date birthday = user.getBirthday();只需输入user.getBirthday().var+Tab即可。</p><ol start="4"><li>编辑：<br>编辑中不得不说的一大神键就是能够自动按语法选中代码的Ctrl+W以及反向的Ctrl+Shift+W了。此外，Ctrl+Left/Right移动光标到前/后单词，Ctrl+[/]移动到前/后代码块，这些类Vim风格的光标移动也是一大亮点。以上Ctrl+Left/Right/[]加上Shift的话就能选中跳跃范围内的代码。Alt+Forward/Backward移动到前/后方法。还有些非常普通的像Ctrl+Y删除行、Ctrl+D复制行、Ctrl+&lt;/&gt;折叠代码就不多说了。</li></ol><p>关于光标移动再多扩展一点，除了Intellij本身已提供的功能外，我们还可以安装ideaVim或者emacsIDEAs享受到Vim的快速移动和Emacs的AceJump功能(超爽！)。另外，Intellij的书签功能也是不错的，用Ctrl+Shift+Num定义1-10书签(再次按这组快捷键则是删除书签)，然后通过Ctrl+Num跳转。这避免了多次使用前/下一编辑位置Ctrl+Left/Right来回跳转的麻烦，而且此快捷键默认与Windows热键冲突(默认多了Alt，与Windows改变显示器显示方向冲突，一不小心显示器就变成倒着显式的了，冏啊)。</p><ol start="5"><li>查找打开：</li></ol><p>类似Eclipse，Intellij的Ctrl+N/Ctrl+Shift+N可以打开类或资源，但Intellij更加智能一些，我们输入的任何字符都将看作模糊匹配，省却了Eclipse中还有输入*的麻烦。最新版本的IDEA还加入了Search Everywhere功能，只需按Shift+Shift即可在一个弹出框中搜索任何东西，包括类、资源、配置项、方法等等。</p><p>类的继承关系则可用Ctrl+H打开类层次窗口，在继承层次上跳转则用Ctrl+B/Ctrl+Alt+B分别对应父类或父方法定义和子类或子方法实现，查看当前类的所有方法用Ctrl+F12。</p><p>要找类或方法的使用也很简单，Alt+F7。要查找文本的出现位置就用Ctrl+F/Ctrl+Shift+F在当前窗口或全工程中查找，再配合F3/Shift+F3前后移动到下一匹配处。</p><p>Intellij更加智能的又一佐证是在任意菜单或显示窗口，都可以直接输入你要找的单词，Intellij就会自动为你过滤。</p><ol start="6"><li>其他辅助：</li></ol><p>以上这些神键配上一些辅助快捷键，即可让你的双手90%以上的时间摆脱鼠标，专注于键盘仿佛在进行钢琴表演。这些不起眼却是至关重要的最后一块拼图有：</p><p>Ø  命令：Ctrl+Shift+A可以查找所有Intellij的命令，并且每个命令后面还有其快捷键。所以它不仅是一大神键，也是查找学习快捷键的工具。<br>Ø  新建：Alt+Insert可以新建类、方法等任何东西。<br>Ø  格式化代码：格式化import列表Ctrl+Alt+O，格式化代码Ctrl+Alt+L。<br>Ø  切换窗口：Alt+Num，常用的有1-项目结构，3-搜索结果，4/5-运行调试。Ctrl+Tab切换标签页，Ctrl+E/Ctrl+Shift+E打开最近打开过的或编辑过的文件。<br>Ø  单元测试：Ctrl+Alt+T创建单元测试用例。<br>Ø  运行：Alt+Shift+F10运行程序，Shift+F9启动调试，Ctrl+F2停止。<br>Ø  调试：F7/F8/F9分别对应Step into，Step over，Continue。<br>此外还有些我自定义的，例如水平分屏Ctrl+|等，和一些神奇的小功能Ctrl+Shift+V粘贴很早以前拷贝过的，Alt+Shift+Insert进入到列模式进行按列选中。<br>Ø  Top #10切来切去：Ctrl+Tab<br>Ø  Top #9选你所想：Ctrl+W<br>Ø  Top #8代码生成：Template/Postfix +Tab<br>Ø  Top #7发号施令：Ctrl+Shift+A<br>Ø  Top #6无处藏身：Shift+Shift<br>Ø  Top #5自动完成：Ctrl+Shift+Enter<br>Ø  Top #4创造万物：Alt+Insert<br>太难割舍，前三名并列吧！<br>Ø  Top #1智能补全：Ctrl+Shift+Space<br>Ø  Top #1自我修复：Alt+Enter<br>Ø  Top #1重构一切：Ctrl+Shift+Alt+T<br>CTRL+ALT+ left/right 前后导航编辑过的地方<br>Ctrl＋Shift＋Backspace可以跳转到上次编辑的地</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要整理各大IDE在mac平台和windows平台下的一些实用的快捷键，因为笔者也是基于这两个平台做开发，有时候忘记快捷键是一件很痛苦的事，特此记录。&lt;/p&gt;
    
    </summary>
    
      <category term="eclipse快捷键,idea快捷键" scheme="https://blog.examplecn.com/categories/eclipse%E5%BF%AB%E6%8D%B7%E9%94%AE-idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
    
      <category term="实用快捷键" scheme="https://blog.examplecn.com/tags/%E5%AE%9E%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudLearn系列（一）：服务注册中心eureka版</title>
    <link href="https://blog.examplecn.com/2017/12/10/springcloudeurekaserver/"/>
    <id>https://blog.examplecn.com/2017/12/10/springcloudeurekaserver/</id>
    <published>2017-12-10T11:38:58.000Z</published>
    <updated>2018-10-22T09:39:21.765Z</updated>
    
    <content type="html"><![CDATA[<p>本文是SpringCloudLearn系列的第一篇，前段时间一直在做微服务的落地工作，相对稳定后，现在开始整理SpringCloud的一些最佳实践给大家分享，有不对的地<br>方希望大家指出。这一系列的文章会基于SpringCloud最新的Finchley.M5版本给出示例，后续也会及时更新到最新的版本，相关完整示例请转向到以下地址：<br>[<a href="https://github.com/pengjieran/SpringCloudLearn" target="_blank" rel="noopener">SpringCloudLearn系列示例</a>]</p><a id="more"></a><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ol><li><p>新建maven项目</p></li><li><p>pom.xml完整配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud-eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>springcloud eureka server端项目<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.M7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.M5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--eurekaserver暂时无法切换成undertow容器，已向官方提issue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 跳过测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在包下新建SpringCloudEurekaServerApplication.java文件</p></li><li><p>在该类上增加注解并配置相关信息,全部内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">SpringApplication.run(SpringCloudEurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在src/main/resources目录下增加bootstrap.yml文件，主要配置如下，至于为何不用application.yml,等你真正使用于生产环境就会明白。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">discovery</span></span><br><span class="line"><span class="attr">    admin:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span> <span class="comment">#端口号，eureka服务端默认端口号是8761</span></span><br><span class="line"><span class="attr">  undertow:</span></span><br><span class="line"><span class="attr">    io-threads:</span> <span class="number">4</span> <span class="comment">#io线程数，一般与cpu核心数相同</span></span><br><span class="line"><span class="attr">    worker-threads:</span> <span class="number">200</span> <span class="comment">#工作线程数</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#服务端不需要注册自身</span></span><br><span class="line"><span class="attr">    fetch-remote-regions-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  server:</span> </span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#是否打开安全模式，默认为true,生产环境请设置为true,开发和测试环境由于需要频繁发布，可设置为false</span></span><br></pre></td></tr></table></figure></li></ol><p>好了，到这里，所有的配置工作就完成了</p><h2 id="编译并运行"><a href="#编译并运行" class="headerlink" title="编译并运行"></a>编译并运行</h2><ol><li>打开命令行并运行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure></li></ol><p>也可以在STS中直接使用boot dashboard启动。</p><p>建议：开发Springcloud相关项目可直接使用官方提供的STS，简单，高效，不建议使用IDEA</p><p>好了，一个简单的eureka服务注册中心到这里就运行起来了，本篇文章结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是SpringCloudLearn系列的第一篇，前段时间一直在做微服务的落地工作，相对稳定后，现在开始整理SpringCloud的一些最佳实践给大家分享，有不对的地&lt;br&gt;方希望大家指出。这一系列的文章会基于SpringCloud最新的Finchley.M5版本给出示例，后续也会及时更新到最新的版本，相关完整示例请转向到以下地址：&lt;br&gt;[&lt;a href=&quot;https://github.com/pengjieran/SpringCloudLearn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SpringCloudLearn系列示例&lt;/a&gt;]&lt;/p&gt;
    
    </summary>
    
      <category term="springcloud" scheme="https://blog.examplecn.com/categories/springcloud/"/>
    
    
      <category term="eurekaserver" scheme="https://blog.examplecn.com/tags/eurekaserver/"/>
    
      <category term="eureka服务端配置" scheme="https://blog.examplecn.com/tags/eureka%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hexo环境安装配置</title>
    <link href="https://blog.examplecn.com/2017/12/09/hexoinstall/"/>
    <id>https://blog.examplecn.com/2017/12/09/hexoinstall/</id>
    <published>2017-12-09T12:46:25.000Z</published>
    <updated>2018-10-22T09:39:21.761Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍node.js的安装，npm的安装，hexo环境配置及相关命令使用</p><a id="more"></a><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol><li><p>[<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node.js下载链接</a>]</p></li><li><p>安装完成后检查环境是否正常</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node --version</span><br><span class="line">v8.9.2  //出现这个版本号说明已完成安装</span><br><span class="line">        //npm已经包含在新版本的node中，不需要再安装</span><br></pre></td></tr></table></figure><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//创建博客根目录</span><br><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">// 安装hexo</span><br><span class="line">$ npm install hexo -g</span><br><span class="line">//升级hexo</span><br><span class="line">$ npm update hexo -g</span><br><span class="line">//初始化目录</span><br><span class="line">$ hexo init</span><br><span class="line">//启动服务</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="hexo相关命令行"><a href="#hexo相关命令行" class="headerlink" title="hexo相关命令行"></a>hexo相关命令行</h2><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate<span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy<span class="comment">#部署</span></span><br></pre></td></tr></table></figure><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br><span class="line"></span><br><span class="line">hexo clean <span class="comment">#清除缓存 网页正常情况下可以忽略此条命令</span></span><br><span class="line">hexo g <span class="comment">#生成静态网页</span></span><br><span class="line">hexo d <span class="comment">#开始部署</span></span><br></pre></td></tr></table></figure><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment">#使用 Hexo 生成静态文件快速而且简单</span></span><br><span class="line">hexo generate --watch <span class="comment">#监视文件变动</span></span><br></pre></td></tr></table></figure><h3 id="页面相关"><a href="#页面相关" class="headerlink" title="页面相关"></a>页面相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span>         <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span>    <span class="comment">#新建页面</span></span><br><span class="line">hexo new page tags          <span class="comment">#新建标签页，刚刚初始化的博客目录需要使用此命令新建标签页</span></span><br><span class="line">hexo new page categories    <span class="comment">#新建分类页，刚刚初始化的根目录需要使用此命令新建分类页</span></span><br></pre></td></tr></table></figure><h3 id="页面顶部主要内容"><a href="#页面顶部主要内容" class="headerlink" title="页面顶部主要内容"></a>页面顶部主要内容</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2014-03-03 19:07:43</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line">tags: [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description: 文章描述</span><br></pre></td></tr></table></figure><h3 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">#以上是文章摘要</span></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"><span class="section">#以下是文章全文</span></span><br></pre></td></tr></table></figure><h3 id="插件简介"><a href="#插件简介" class="headerlink" title="插件简介"></a>插件简介</h3><p>插件安装命令：npm install 插件名 –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo-generator-index #文章索引支持插件</span><br><span class="line">hexo-generator-archive #文章存档支持插件</span><br><span class="line">hexo-generator-category #文章分类支持插件</span><br><span class="line">hexo-generator-tag #文章标签支持插件</span><br><span class="line">hexo-deployer-git #git自动部署支持插件</span><br><span class="line">hexo-generator-feed #订阅rss支持插件</span><br><span class="line">hexo-generator-sitemap #导航地图支持插件</span><br><span class="line">hexo-generator-searchdb #本地搜索local_search配置项支持插件</span><br></pre></td></tr></table></figure><p>更多插件可参考链接：<a href="https://github.com/hexojs/hexo/wiki/Plugins" target="_blank" rel="noopener">https://github.com/hexojs/hexo/wiki/Plugins</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍node.js的安装，npm的安装，hexo环境配置及相关命令使用&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://blog.examplecn.com/categories/hexo/"/>
    
    
      <category term="hexo命令行" scheme="https://blog.examplecn.com/tags/hexo%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>OAuth2认证和授权原理</title>
    <link href="https://blog.examplecn.com/2016/05/02/OAuth2/"/>
    <id>https://blog.examplecn.com/2016/05/02/OAuth2/</id>
    <published>2016-05-02T08:16:25.000Z</published>
    <updated>2019-04-02T06:26:50.958Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要介绍OAuth2.0版本的认证规则。每个站点的oauth认证流程都是相同的，看了本篇文章，相信你能对oauth有更深的认识</p><a id="more"></a><h1 id="OAuth2-0认证和授权原理解析"><a href="#OAuth2-0认证和授权原理解析" class="headerlink" title="OAuth2.0认证和授权原理解析"></a>OAuth2.0认证和授权原理解析</h1><p>OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。<br>本文对OAuth 2.0的设计思路和运行流程，做一个简明通俗的解释，主要参考材料为<a href="http://www.rfcreader.com/#rfc6749" target="_blank" rel="noopener">rfc6749</a></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>为了理解适用场景，假设一个场景。<br>有一个叫”爱阅读”的应用，想要利用QQ众多的用户群，获取QQ用户的信息，关键问题是，腾讯是不会允许这款应用直接读取用户信息的，<br>另外一种方案是存储用户的qq账号和密码，通过登录获取信息，但是，直接存储用户名和密码是不安全的，一旦用户修改了qq密码，这个<br>应用也是不知道的，从而无法获取用户信息。尊重隐私权的考虑，也不应该在用户不知情的情况下直接读取用户信息。OAuth就是为了解决上面这种场景诞生的。</p><h2 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h2><p>OAuth2.0定义了如下几个专业名词，理解这几个名词对理解后面的讲解至关重要。</p><ul><li>Third-party application<br>第三方应用，又称client,客户端，即上一节提到的那个应用</li><li>HTTP service<br>http服务提供方，即上一节所说的QQ</li><li>Resource Owner<br>资源所有者，即QQ用户</li><li>User Agent<br>用户代理，本文中就是指浏览器。</li><li>Authorization server<br>认证服务器，即服务提供商专门用来处理认证的服务器。</li><li>Resource server<br>资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。<h2 id="OAuth的思路"><a href="#OAuth的思路" class="headerlink" title="OAuth的思路"></a>OAuth的思路</h2>OAuth在客户端和资源提供方之间设置了一个授权层，客户端不能直接从资源提供方获取资源，只能先访问授权层，以此将用户和客户端区分开，<br>客户端访问资源所使用的令牌，与用户的密码不同，用户可以在登录的时候，指定授权层令牌的权限范围和有效期。客户端在访问用户资源时，<br>资源层根据令牌的访问范围和有效期，开放指定资源的访问权限<h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2>OAuth2.0的运行流程如下，摘自<a href="http://www.rfcreader.com/#rfc6749" target="_blank" rel="noopener">rfc6749</a><br><img src="./images/oauth2liucheng.png" alt><br>(A) 用户打开客户端后，客户端要求用户提供授权的必要信息<br><br>(B) 用户同意给予授权<br><br>(C) 客户端使用上一步获得的授权，像认证服务器申请令牌<br><br>(D) 认证服务器对客户端认证，确认无误，发放访问令牌<br><br>(E) 客户端使用令牌，想资源服务器请求资源<br><br>(F) 资源服务器确认令牌，根据指定的有效期和访问范围，开放受保护的资源访问<br><br>上面的6个步骤中，B是关键，也就是客户端如何获取用户授权的问题，客户端只有拥有了用户授权，才能获取令牌，进而访问资源，下面<br>请看客户端获取用户授权的四种方式<h2 id="客户端的授权模式"><a href="#客户端的授权模式" class="headerlink" title="客户端的授权模式"></a>客户端的授权模式</h2>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth2.0定义了四种授权方式</li><li>授权码模式（authorization code）</li><li>简化模式（implicit）</li><li>密码模式（resource owner password credentials）</li><li>客户端模式（client credentials）<h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3>授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。<br><img src="./images/authcode.png" alt><br>它的步骤如下：<br><br>（A）用户访问客户端，后者将前者导向认证服务器。<br><br>（B）用户选择是否给予客户端授权。<br><br>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。<br><br>（D）客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。<br><br>（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</li></ul><p>下面是上面这些步骤所需要的参数。</p><p>A步骤中，客户端申请认证的URI，包含以下参数：</p><p>response_type：表示授权类型，必选项，此处的值固定为”code”<br>client_id：表示客户端的ID，必选项<br>redirect_uri：表示重定向URI，可选项<br>scope：表示申请的权限范围，可选项<br>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。<br>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</span><br><span class="line">HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br></pre></td></tr></table></figure><p>C步骤中，服务器回应客户端的URI，包含以下参数：</p><p>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。<br>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。<br>下面是一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Location: &lt;a href=&quot;https://client.example.com/cb&quot;&gt;https://client.example.com/cb&lt;/a&gt;?code=SplxlOBeZQQYbYS6WxSbIA</span><br><span class="line">&amp;amp;state=xyz</span><br></pre></td></tr></table></figure><p>D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：</p><p>grant_type：表示使用的授权模式，必选项，此处的值固定为”authorization_code”。<br>code：表示上一步获得的授权码，必选项。<br>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。<br>client_id：表示客户端ID，必选项。<br>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code&amp;amp;code=SplxlOBeZQQYbYS6WxSbIA</span><br><span class="line">&amp;amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</span><br></pre></td></tr></table></figure><p>E步骤中，认证服务器发送的HTTP回复，包含以下参数：</p><p>access_token：表示访问令牌，必选项。<br>token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。<br>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。<br>refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。<br>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。<br>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Cache-Control: no-store</span><br><span class="line">Pragma: no-cache</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;access_token&quot;:&quot;2YotnFZFEjr1zCsicMWpAA&quot;,</span><br><span class="line">&quot;token_type&quot;:&quot;example&quot;,</span><br><span class="line">&quot;expires_in&quot;:3600,</span><br><span class="line">&quot;refresh_token&quot;:&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;,</span><br><span class="line">&quot;example_parameter&quot;:&quot;example_value&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可以看到，相关参数使用JSON格式发送（Content-Type: application/json）。此外，HTTP头信息中明确指定不得缓存。</p><h3 id="简化模式"><a href="#简化模式" class="headerlink" title="简化模式"></a>简化模式</h3><p>简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。<br><img src="./images/jianhua.png" alt><br>它的步骤如下：</p><p>（A）客户端将用户导向认证服务器。</p><p>（B）用户决定是否给于客户端授权。</p><p>（C）假设用户给予授权，认证服务器将用户导向客户端指定的”重定向URI”，并在URI的Hash部分包含了访问令牌。</p><p>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</p><p>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</p><p>（F）浏览器执行上一步获得的脚本，提取出令牌。</p><p>（G）浏览器将令牌发给客户端。</p><p>下面是上面这些步骤所需要的参数。</p><p>A步骤中，客户端发出的HTTP请求，包含以下参数：</p><p>response_type：表示授权类型，此处的值固定为”token”，必选项。</p><p>client_id：表示客户端的ID，必选项。</p><p>redirect_uri：表示重定向的URI，可选项。</p><p>scope：表示权限范围，可选项。</p><p>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</p><p>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /authorize?response_type=token&amp;amp;client_id=s6BhdRkqt3&amp;amp;state=xyz</span><br><span class="line">&amp;amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br></pre></td></tr></table></figure><p>C步骤中，认证服务器回应客户端的URI，包含以下参数：</p><p>access_token：表示访问令牌，必选项。</p><p>token_type：表示令牌类型，该值大小写不敏感，必选项。</p><p>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</p><p>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</p><p>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</p><p>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Location: &lt;a href=&quot;http://example.com/cb&quot;&gt;http://example.com/cb&lt;/a&gt;#access_token=2YotnFZFEjr1zCsicMWpAA</span><br><span class="line">&amp;amp;state=xyz&amp;amp;token_type=example&amp;amp;expires_in=3600</span><br></pre></td></tr></table></figure><p>在上面的例子中，认证服务器用HTTP头信息的Location栏，指定浏览器重定向的网址。注意，在这个网址的Hash部分包含了令牌。</p><p>根据上面的D步骤，下一步浏览器会访问Location指定的网址，但是Hash部分不会发送。接下来的E步骤，服务提供商的资源服务器发送过来的代码，会提取出Hash中的令牌。</p><h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p>密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。<br>在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。<br><img src="./images/mima.png" alt><br>它的步骤如下：</p><p>（A）用户向客户端提供用户名和密码。</p><p>（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。</p><p>（C）认证服务器确认无误后，向客户端提供访问令牌。</p><p>B步骤中，客户端发出的HTTP请求，包含以下参数：</p><p>grant_type：表示授权类型，此处的值固定为”password”，必选项。<br><br>username：表示用户名，必选项。<br><br>password：表示用户的密码，必选项。<br><br>scope：表示权限范围，可选项。<br><br>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=password&amp;username=johndoe&amp;password=A3ddj3w</span><br></pre></td></tr></table></figure><p>C步骤中，认证服务器向客户端发送访问令牌，下面是一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Cache-Control: no-store</span><br><span class="line">Pragma: no-cache</span><br><span class="line">&#123;</span><br><span class="line">  &quot;access_token&quot;:&quot;2YotnFZFEjr1zCsicMWpAA&quot;,</span><br><span class="line">  &quot;token_type&quot;:&quot;example&quot;,</span><br><span class="line">  &quot;expires_in&quot;:3600,</span><br><span class="line">  &quot;refresh_token&quot;:&quot;tGzv3JOkF0XG5Qx2TlKWIA&quot;,</span><br><span class="line">  &quot;example_parameter&quot;:&quot;example_value&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，各个参数的含义参见《授权码模式》一节。</p><p>整个过程中，客户端不得保存用户的密码。</p><h3 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h3><p>客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。<br><img src="./images/client.png" alt><br>它的步骤如下：</p><p>（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。</p><p>（B）认证服务器确认无误后，向客户端提供访问令牌。</p><p>A步骤中，客户端发出的HTTP请求，包含以下参数：<br><br>granttype：表示授权类型，此处的值固定为”clientcredentials”，必选项。<br><br>scope：表示权限范围，可选项<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=client_credentials</span><br></pre></td></tr></table></figure><p>认证服务器必须以某种方式，验证客户端身份。</p><p>B步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Cache-Control: no-store</span><br><span class="line">Pragma: no-cache</span><br><span class="line">&#123;</span><br><span class="line">  &quot;access_token&quot;:&quot;2YotnFZFEjr1zCsicMWpAA&quot;,</span><br><span class="line">  &quot;token_type&quot;:&quot;example&quot;,</span><br><span class="line">  &quot;expires_in&quot;:3600,</span><br><span class="line">  &quot;example_parameter&quot;:&quot;example_value&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，各个参数的含义参见《授权码模式》一节。</p><h3 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h3><p>如果用户访问的时候，客户端的”访问令牌”已经过期，则需要使用”更新令牌”申请一个新的访问令牌。<br>客户端发出更新令牌的HTTP请求，包含以下参数：<br><br>granttype：表示使用的授权模式，此处的值固定为”refreshtoken”，必选项。<br><br>refresh_token：表示早前收到的更新令牌，必选项。<br><br>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。<br><br>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=refresh_token&amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要介绍OAuth2.0版本的认证规则。每个站点的oauth认证流程都是相同的，看了本篇文章，相信你能对oauth有更深的认识&lt;/p&gt;
    
    </summary>
    
      <category term="oauth2" scheme="https://blog.examplecn.com/categories/oauth2/"/>
    
    
      <category term="认证" scheme="https://blog.examplecn.com/tags/%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
</feed>
